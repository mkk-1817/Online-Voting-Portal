{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { r as raf } from './helpers.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nconst IonSegmentIosStyle0 = segmentIosCss;\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nconst IonSegmentMdStyle0 = segmentMdCss;\nconst Segment = /*@__PURE__*/proxyCustomElement(class Segment extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.onClick = ev => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        } else {\n          this.setCheckedClasses();\n        }\n      }\n    };\n    this.getSegmentButton = selector => {\n      var _a, _b;\n      const buttons = this.getButtons().filter(button => !button.disabled);\n      const currIndex = buttons.findIndex(button => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n    this.activated = false;\n    this.color = undefined;\n    this.disabled = false;\n    this.scrollable = false;\n    this.swipeGesture = true;\n    this.value = undefined;\n    this.selectOnFocus = false;\n  }\n  colorChanged(value, oldValue) {\n    /**\r\n     * If color is set after not having\r\n     * previously been set (or vice versa),\r\n     * we need to emit style so the segment-buttons\r\n     * can apply their color classes properly.\r\n     */\n    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value) {\n    /**\r\n     * `ionSelect` is emitted every time the value changes (internal or external changes).\r\n     * Used by `ion-segment-button` to determine if the button should be checked.\r\n     */\n    this.ionSelect.emit({\n      value\n    });\n    this.scrollActiveButtonIntoView();\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    /**\r\n     * If the value changes before watchers\r\n     * are setup, then the ionSelect watch callback\r\n     * will not fire. As a result, we manually\r\n     * fire this event when Select is loaded.\r\n     */\n    this.ionSelect.emit({\n      value: this.value\n    });\n    /**\r\n     * We need to wait for the buttons to all be rendered\r\n     * before we can scroll.\r\n     */\n    raf(() => {\n      /**\r\n       * When the segment loads for the first\r\n       * time we just want to snap the active button into\r\n       * place instead of scroll. Smooth scrolling should only\r\n       * happen when the user interacts with the segment.\r\n       */\n      this.scrollActiveButtonIntoView(false);\n    });\n    this.gesture = (await import('./index3.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: ev => this.onEnd(ev)\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n  }\n  onStart(detail) {\n    this.valueBeforeGesture = this.value;\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    const value = this.value;\n    if (value !== undefined) {\n      if (this.valueBeforeGesture !== value) {\n        this.emitValueChange();\n      }\n    }\n    this.valueBeforeGesture = undefined;\n  }\n  /**\r\n   * Emits an `ionChange` event.\r\n   *\r\n   * This API should be called for user committed changes.\r\n   * This API should not be used for external value changes.\r\n   */\n  emitValueChange() {\n    const {\n      value\n    } = this;\n    this.ionChange.emit({\n      value\n    });\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  get checked() {\n    return this.getButtons().find(button => button.value === this.value);\n  }\n  /*\r\n   * Activate both the segment and the buttons\r\n   * due to a bug with ::slotted in Safari\r\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach(button => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      } else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find(button => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const next = index + 1;\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  scrollActiveButtonIntoView(smoothScroll = true) {\n    const {\n      scrollable,\n      value,\n      el\n    } = this;\n    if (scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find(button => button.value === value);\n      if (activeButton !== undefined) {\n        const scrollContainerBox = el.getBoundingClientRect();\n        const activeButtonBox = activeButton.getBoundingClientRect();\n        /**\r\n         * Subtract the active button x position from the scroll\r\n         * container x position. This will give us the x position\r\n         * of the active button within the scroll container.\r\n         */\n        const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\n        /**\r\n         * If we just used activeButtonLeft, then the active button\r\n         * would be aligned with the left edge of the scroll container.\r\n         * Instead, we want the segment button to be centered. As a result,\r\n         * we subtract half of the scroll container width. This will position\r\n         * the left edge of the active button at the midpoint of the scroll container.\r\n         * We then add half of the active button width. This will position the active\r\n         * button such that the midpoint of the active button is at the midpoint of the\r\n         * scroll container.\r\n         */\n        const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\n        /**\r\n         * We intentionally use scrollBy here instead of scrollIntoView\r\n         * to avoid a WebKit bug where accelerated animations break\r\n         * when using scrollIntoView. Using scrollIntoView will cause the\r\n         * segment container to jump during the transition and then snap into place.\r\n         * This is because scrollIntoView can potentially cause parent element\r\n         * containers to also scroll. scrollBy does not have this same behavior, so\r\n         * we use this API instead.\r\n         *\r\n         * Note that if there is not enough scrolling space to center the element\r\n         * within the scroll container, the browser will attempt\r\n         * to center by as much as it can.\r\n         */\n        el.scrollBy({\n          top: 0,\n          left: centeredX,\n          behavior: smoothScroll ? 'smooth' : 'instant'\n        });\n      }\n    }\n  }\n  setNextIndex(detail, isEnd = false) {\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\r\n     * Segment can be used inside the shadow dom\r\n     * so doing document.elementFromPoint would never\r\n     * return a segment button in that instance.\r\n     * We use getRootNode to which will return the parent\r\n     * shadow root if used inside a shadow component and\r\n     * returns document otherwise.\r\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      } else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\r\n       * If current element is ion-segment then that means\r\n       * user tried to select a disabled ion-segment-button,\r\n       * and we should not update the ripple.\r\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked;\n      this.checkButton(previous || current, current);\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '0cf2e11e5599a0de2b0c7dc2a46917f4894ceb05',\n      role: \"tablist\",\n      onClick: this.onClick,\n      class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable\n      })\n    }, h(\"slot\", {\n      key: '913f2e4a823d3a58ea074dfb95314651c46739db'\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"color\": [\"colorChanged\"],\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: IonSegmentIosStyle0,\n      md: IonSegmentMdStyle0\n    };\n  }\n}, [33, \"ion-segment\", {\n  \"color\": [513],\n  \"disabled\": [4],\n  \"scrollable\": [4],\n  \"swipeGesture\": [4, \"swipe-gesture\"],\n  \"value\": [1032],\n  \"selectOnFocus\": [4, \"select-on-focus\"],\n  \"activated\": [32]\n}, [[0, \"keydown\", \"onKeyDown\"]], {\n  \"color\": [\"colorChanged\"],\n  \"swipeGesture\": [\"swipeGestureChanged\"],\n  \"value\": [\"valueChanged\"],\n  \"disabled\": [\"disabledChanged\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-segment\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Segment);\n        }\n        break;\n    }\n  });\n}\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonSegment, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","h","Host","r","raf","i","isRTL","c","createColorClasses","hostContext","b","getIonMode","segmentIosCss","IonSegmentIosStyle0","segmentMdCss","IonSegmentMdStyle0","Segment","constructor","__registerHost","__attachShadow","ionChange","ionSelect","ionStyle","onClick","ev","current","target","previous","checked","tagName","value","emitValueChange","scrollable","swipeGesture","checkButton","setCheckedClasses","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","disabled","currIndex","findIndex","document","activeElement","length","activated","color","undefined","selectOnFocus","colorChanged","oldValue","emitStyle","swipeGestureChanged","gestureChanged","valueChanged","emit","scrollActiveButtonIntoView","disabledChanged","gesture","enable","connectedCallback","componentWillLoad","componentDidLoad","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","detail","valueBeforeGesture","activate","setNextIndex","setActivated","event","stopImmediatePropagation","Array","from","querySelectorAll","find","forEach","classList","add","remove","clicked","getIndicator","root","shadowRoot","querySelector","previousIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","widthDelta","width","xPosition","left","transform","style","setProperty","index","next","smoothScroll","activeButton","scrollContainerBox","activeButtonBox","activeButtonLeft","x","centeredX","scrollBy","top","behavior","isEnd","rtl","nextIndex","rect","currentX","previousY","height","getRootNode","nextEl","elementFromPoint","decreaseIndex","increaseIndex","newIndex","segment","onKeyDown","keyDownSelectsButton","key","preventDefault","setFocus","render","mode","role","class","watchers","ios","md","defineCustomElement$1","customElements","components","get","define","IonSegment","defineCustomElement"],"sources":["E:/Online-Voting-Portal/client/node_modules/@ionic/core/components/ion-segment.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\r\nimport { r as raf } from './helpers.js';\r\nimport { i as isRTL } from './dir.js';\r\nimport { c as createColorClasses, h as hostContext } from './theme.js';\r\nimport { b as getIonMode } from './ionic-global.js';\r\n\r\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\r\nconst IonSegmentIosStyle0 = segmentIosCss;\r\n\r\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\r\nconst IonSegmentMdStyle0 = segmentMdCss;\r\n\r\nconst Segment = /*@__PURE__*/ proxyCustomElement(class Segment extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.__registerHost();\r\n        this.__attachShadow();\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\r\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n        this.onClick = (ev) => {\r\n            const current = ev.target;\r\n            const previous = this.checked;\r\n            // If the current element is a segment then that means\r\n            // the user tried to swipe to a segment button and\r\n            // click a segment button at the same time so we should\r\n            // not update the checked segment button\r\n            if (current.tagName === 'ION-SEGMENT') {\r\n                return;\r\n            }\r\n            this.value = current.value;\r\n            if (current !== previous) {\r\n                this.emitValueChange();\r\n            }\r\n            if (this.scrollable || !this.swipeGesture) {\r\n                if (previous) {\r\n                    this.checkButton(previous, current);\r\n                }\r\n                else {\r\n                    this.setCheckedClasses();\r\n                }\r\n            }\r\n        };\r\n        this.getSegmentButton = (selector) => {\r\n            var _a, _b;\r\n            const buttons = this.getButtons().filter((button) => !button.disabled);\r\n            const currIndex = buttons.findIndex((button) => button === document.activeElement);\r\n            switch (selector) {\r\n                case 'first':\r\n                    return buttons[0];\r\n                case 'last':\r\n                    return buttons[buttons.length - 1];\r\n                case 'next':\r\n                    return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\r\n                case 'previous':\r\n                    return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\r\n                default:\r\n                    return null;\r\n            }\r\n        };\r\n        this.activated = false;\r\n        this.color = undefined;\r\n        this.disabled = false;\r\n        this.scrollable = false;\r\n        this.swipeGesture = true;\r\n        this.value = undefined;\r\n        this.selectOnFocus = false;\r\n    }\r\n    colorChanged(value, oldValue) {\r\n        /**\r\n         * If color is set after not having\r\n         * previously been set (or vice versa),\r\n         * we need to emit style so the segment-buttons\r\n         * can apply their color classes properly.\r\n         */\r\n        if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\r\n            this.emitStyle();\r\n        }\r\n    }\r\n    swipeGestureChanged() {\r\n        this.gestureChanged();\r\n    }\r\n    valueChanged(value) {\r\n        /**\r\n         * `ionSelect` is emitted every time the value changes (internal or external changes).\r\n         * Used by `ion-segment-button` to determine if the button should be checked.\r\n         */\r\n        this.ionSelect.emit({ value });\r\n        this.scrollActiveButtonIntoView();\r\n    }\r\n    disabledChanged() {\r\n        this.gestureChanged();\r\n        const buttons = this.getButtons();\r\n        for (const button of buttons) {\r\n            button.disabled = this.disabled;\r\n        }\r\n    }\r\n    gestureChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this.emitStyle();\r\n    }\r\n    componentWillLoad() {\r\n        this.emitStyle();\r\n    }\r\n    async componentDidLoad() {\r\n        this.setCheckedClasses();\r\n        /**\r\n         * If the value changes before watchers\r\n         * are setup, then the ionSelect watch callback\r\n         * will not fire. As a result, we manually\r\n         * fire this event when Select is loaded.\r\n         */\r\n        this.ionSelect.emit({ value: this.value });\r\n        /**\r\n         * We need to wait for the buttons to all be rendered\r\n         * before we can scroll.\r\n         */\r\n        raf(() => {\r\n            /**\r\n             * When the segment loads for the first\r\n             * time we just want to snap the active button into\r\n             * place instead of scroll. Smooth scrolling should only\r\n             * happen when the user interacts with the segment.\r\n             */\r\n            this.scrollActiveButtonIntoView(false);\r\n        });\r\n        this.gesture = (await import('./index3.js')).createGesture({\r\n            el: this.el,\r\n            gestureName: 'segment',\r\n            gesturePriority: 100,\r\n            threshold: 0,\r\n            passive: false,\r\n            onStart: (ev) => this.onStart(ev),\r\n            onMove: (ev) => this.onMove(ev),\r\n            onEnd: (ev) => this.onEnd(ev),\r\n        });\r\n        this.gestureChanged();\r\n        if (this.disabled) {\r\n            this.disabledChanged();\r\n        }\r\n    }\r\n    onStart(detail) {\r\n        this.valueBeforeGesture = this.value;\r\n        this.activate(detail);\r\n    }\r\n    onMove(detail) {\r\n        this.setNextIndex(detail);\r\n    }\r\n    onEnd(detail) {\r\n        this.setActivated(false);\r\n        this.setNextIndex(detail, true);\r\n        detail.event.stopImmediatePropagation();\r\n        const value = this.value;\r\n        if (value !== undefined) {\r\n            if (this.valueBeforeGesture !== value) {\r\n                this.emitValueChange();\r\n            }\r\n        }\r\n        this.valueBeforeGesture = undefined;\r\n    }\r\n    /**\r\n     * Emits an `ionChange` event.\r\n     *\r\n     * This API should be called for user committed changes.\r\n     * This API should not be used for external value changes.\r\n     */\r\n    emitValueChange() {\r\n        const { value } = this;\r\n        this.ionChange.emit({ value });\r\n    }\r\n    getButtons() {\r\n        return Array.from(this.el.querySelectorAll('ion-segment-button'));\r\n    }\r\n    get checked() {\r\n        return this.getButtons().find((button) => button.value === this.value);\r\n    }\r\n    /*\r\n     * Activate both the segment and the buttons\r\n     * due to a bug with ::slotted in Safari\r\n     */\r\n    setActivated(activated) {\r\n        const buttons = this.getButtons();\r\n        buttons.forEach((button) => {\r\n            if (activated) {\r\n                button.classList.add('segment-button-activated');\r\n            }\r\n            else {\r\n                button.classList.remove('segment-button-activated');\r\n            }\r\n        });\r\n        this.activated = activated;\r\n    }\r\n    activate(detail) {\r\n        const clicked = detail.event.target;\r\n        const buttons = this.getButtons();\r\n        const checked = buttons.find((button) => button.value === this.value);\r\n        // Make sure we are only checking for activation on a segment button\r\n        // since disabled buttons will get the click on the segment\r\n        if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\r\n            return;\r\n        }\r\n        // If there are no checked buttons, set the current button to checked\r\n        if (!checked) {\r\n            this.value = clicked.value;\r\n            this.setCheckedClasses();\r\n        }\r\n        // If the gesture began on the clicked button with the indicator\r\n        // then we should activate the indicator\r\n        if (this.value === clicked.value) {\r\n            this.setActivated(true);\r\n        }\r\n    }\r\n    getIndicator(button) {\r\n        const root = button.shadowRoot || button;\r\n        return root.querySelector('.segment-button-indicator');\r\n    }\r\n    checkButton(previous, current) {\r\n        const previousIndicator = this.getIndicator(previous);\r\n        const currentIndicator = this.getIndicator(current);\r\n        if (previousIndicator === null || currentIndicator === null) {\r\n            return;\r\n        }\r\n        const previousClientRect = previousIndicator.getBoundingClientRect();\r\n        const currentClientRect = currentIndicator.getBoundingClientRect();\r\n        const widthDelta = previousClientRect.width / currentClientRect.width;\r\n        const xPosition = previousClientRect.left - currentClientRect.left;\r\n        // Scale the indicator width to match the previous indicator width\r\n        // and translate it on top of the previous indicator\r\n        const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\r\n        writeTask(() => {\r\n            // Remove the transition before positioning on top of the previous indicator\r\n            currentIndicator.classList.remove('segment-button-indicator-animated');\r\n            currentIndicator.style.setProperty('transform', transform);\r\n            // Force a repaint to ensure the transform happens\r\n            currentIndicator.getBoundingClientRect();\r\n            // Add the transition to move the indicator into place\r\n            currentIndicator.classList.add('segment-button-indicator-animated');\r\n            // Remove the transform to slide the indicator back to the button clicked\r\n            currentIndicator.style.setProperty('transform', '');\r\n        });\r\n        this.value = current.value;\r\n        this.setCheckedClasses();\r\n    }\r\n    setCheckedClasses() {\r\n        const buttons = this.getButtons();\r\n        const index = buttons.findIndex((button) => button.value === this.value);\r\n        const next = index + 1;\r\n        for (const button of buttons) {\r\n            button.classList.remove('segment-button-after-checked');\r\n        }\r\n        if (next < buttons.length) {\r\n            buttons[next].classList.add('segment-button-after-checked');\r\n        }\r\n    }\r\n    scrollActiveButtonIntoView(smoothScroll = true) {\r\n        const { scrollable, value, el } = this;\r\n        if (scrollable) {\r\n            const buttons = this.getButtons();\r\n            const activeButton = buttons.find((button) => button.value === value);\r\n            if (activeButton !== undefined) {\r\n                const scrollContainerBox = el.getBoundingClientRect();\r\n                const activeButtonBox = activeButton.getBoundingClientRect();\r\n                /**\r\n                 * Subtract the active button x position from the scroll\r\n                 * container x position. This will give us the x position\r\n                 * of the active button within the scroll container.\r\n                 */\r\n                const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\r\n                /**\r\n                 * If we just used activeButtonLeft, then the active button\r\n                 * would be aligned with the left edge of the scroll container.\r\n                 * Instead, we want the segment button to be centered. As a result,\r\n                 * we subtract half of the scroll container width. This will position\r\n                 * the left edge of the active button at the midpoint of the scroll container.\r\n                 * We then add half of the active button width. This will position the active\r\n                 * button such that the midpoint of the active button is at the midpoint of the\r\n                 * scroll container.\r\n                 */\r\n                const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\r\n                /**\r\n                 * We intentionally use scrollBy here instead of scrollIntoView\r\n                 * to avoid a WebKit bug where accelerated animations break\r\n                 * when using scrollIntoView. Using scrollIntoView will cause the\r\n                 * segment container to jump during the transition and then snap into place.\r\n                 * This is because scrollIntoView can potentially cause parent element\r\n                 * containers to also scroll. scrollBy does not have this same behavior, so\r\n                 * we use this API instead.\r\n                 *\r\n                 * Note that if there is not enough scrolling space to center the element\r\n                 * within the scroll container, the browser will attempt\r\n                 * to center by as much as it can.\r\n                 */\r\n                el.scrollBy({\r\n                    top: 0,\r\n                    left: centeredX,\r\n                    behavior: smoothScroll ? 'smooth' : 'instant',\r\n                });\r\n            }\r\n        }\r\n    }\r\n    setNextIndex(detail, isEnd = false) {\r\n        const rtl = isRTL(this.el);\r\n        const activated = this.activated;\r\n        const buttons = this.getButtons();\r\n        const index = buttons.findIndex((button) => button.value === this.value);\r\n        const previous = buttons[index];\r\n        let current;\r\n        let nextIndex;\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        // Get the element that the touch event started on in case\r\n        // it was the checked button, then we will move the indicator\r\n        const rect = previous.getBoundingClientRect();\r\n        const left = rect.left;\r\n        const width = rect.width;\r\n        // Get the element that the gesture is on top of based on the currentX of the\r\n        // gesture event and the Y coordinate of the starting element, since the gesture\r\n        // can move up and down off of the segment\r\n        const currentX = detail.currentX;\r\n        const previousY = rect.top + rect.height / 2;\r\n        /**\r\n         * Segment can be used inside the shadow dom\r\n         * so doing document.elementFromPoint would never\r\n         * return a segment button in that instance.\r\n         * We use getRootNode to which will return the parent\r\n         * shadow root if used inside a shadow component and\r\n         * returns document otherwise.\r\n         */\r\n        const root = this.el.getRootNode();\r\n        const nextEl = root.elementFromPoint(currentX, previousY);\r\n        const decreaseIndex = rtl ? currentX > left + width : currentX < left;\r\n        const increaseIndex = rtl ? currentX < left : currentX > left + width;\r\n        // If the indicator is currently activated then we have started the gesture\r\n        // on top of the checked button so we need to slide the indicator\r\n        // by checking the button next to it as we move\r\n        if (activated && !isEnd) {\r\n            // Decrease index, move left in LTR & right in RTL\r\n            if (decreaseIndex) {\r\n                const newIndex = index - 1;\r\n                if (newIndex >= 0) {\r\n                    nextIndex = newIndex;\r\n                }\r\n                // Increase index, moves right in LTR & left in RTL\r\n            }\r\n            else if (increaseIndex) {\r\n                if (activated && !isEnd) {\r\n                    const newIndex = index + 1;\r\n                    if (newIndex < buttons.length) {\r\n                        nextIndex = newIndex;\r\n                    }\r\n                }\r\n            }\r\n            if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\r\n                current = buttons[nextIndex];\r\n            }\r\n        }\r\n        // If the indicator is not activated then we will just set the indicator\r\n        // to the element where the gesture ended\r\n        if (!activated && isEnd) {\r\n            current = nextEl;\r\n        }\r\n        if (current != null) {\r\n            /**\r\n             * If current element is ion-segment then that means\r\n             * user tried to select a disabled ion-segment-button,\r\n             * and we should not update the ripple.\r\n             */\r\n            if (current.tagName === 'ION-SEGMENT') {\r\n                return false;\r\n            }\r\n            if (previous !== current) {\r\n                this.checkButton(previous, current);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    emitStyle() {\r\n        this.ionStyle.emit({\r\n            segment: true,\r\n        });\r\n    }\r\n    onKeyDown(ev) {\r\n        const rtl = isRTL(this.el);\r\n        let keyDownSelectsButton = this.selectOnFocus;\r\n        let current;\r\n        switch (ev.key) {\r\n            case 'ArrowRight':\r\n                ev.preventDefault();\r\n                current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\r\n                break;\r\n            case 'ArrowLeft':\r\n                ev.preventDefault();\r\n                current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\r\n                break;\r\n            case 'Home':\r\n                ev.preventDefault();\r\n                current = this.getSegmentButton('first');\r\n                break;\r\n            case 'End':\r\n                ev.preventDefault();\r\n                current = this.getSegmentButton('last');\r\n                break;\r\n            case ' ':\r\n            case 'Enter':\r\n                ev.preventDefault();\r\n                current = document.activeElement;\r\n                keyDownSelectsButton = true;\r\n        }\r\n        if (!current) {\r\n            return;\r\n        }\r\n        if (keyDownSelectsButton) {\r\n            const previous = this.checked;\r\n            this.checkButton(previous || current, current);\r\n            if (current !== previous) {\r\n                this.emitValueChange();\r\n            }\r\n        }\r\n        current.setFocus();\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: '0cf2e11e5599a0de2b0c7dc2a46917f4894ceb05', role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\r\n                [mode]: true,\r\n                'in-toolbar': hostContext('ion-toolbar', this.el),\r\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\r\n                'segment-activated': this.activated,\r\n                'segment-disabled': this.disabled,\r\n                'segment-scrollable': this.scrollable,\r\n            }) }, h(\"slot\", { key: '913f2e4a823d3a58ea074dfb95314651c46739db' })));\r\n    }\r\n    get el() { return this; }\r\n    static get watchers() { return {\r\n        \"color\": [\"colorChanged\"],\r\n        \"swipeGesture\": [\"swipeGestureChanged\"],\r\n        \"value\": [\"valueChanged\"],\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n    static get style() { return {\r\n        ios: IonSegmentIosStyle0,\r\n        md: IonSegmentMdStyle0\r\n    }; }\r\n}, [33, \"ion-segment\", {\r\n        \"color\": [513],\r\n        \"disabled\": [4],\r\n        \"scrollable\": [4],\r\n        \"swipeGesture\": [4, \"swipe-gesture\"],\r\n        \"value\": [1032],\r\n        \"selectOnFocus\": [4, \"select-on-focus\"],\r\n        \"activated\": [32]\r\n    }, [[0, \"keydown\", \"onKeyDown\"]], {\r\n        \"color\": [\"colorChanged\"],\r\n        \"swipeGesture\": [\"swipeGestureChanged\"],\r\n        \"value\": [\"valueChanged\"],\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }]);\r\nfunction defineCustomElement$1() {\r\n    if (typeof customElements === \"undefined\") {\r\n        return;\r\n    }\r\n    const components = [\"ion-segment\"];\r\n    components.forEach(tagName => { switch (tagName) {\r\n        case \"ion-segment\":\r\n            if (!customElements.get(tagName)) {\r\n                customElements.define(tagName, Segment);\r\n            }\r\n            break;\r\n    } });\r\n}\r\n\r\nconst IonSegment = Segment;\r\nconst defineCustomElement = defineCustomElement$1;\r\n\r\nexport { IonSegment, defineCustomElement };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}