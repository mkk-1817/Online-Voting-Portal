{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { a as addEventListener, c as componentOnReady } from './helpers.js';\nimport { a as printIonError } from './index6.js';\nimport { c as createColorClasses } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonIosStyle0 = iosDatetimeButtonCss;\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonMdStyle0 = mdDatetimeButtonCss;\nconst DatetimeButton = /*@__PURE__*/proxyCustomElement(class DatetimeButton extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    /**\n     * Accepts one or more string values and converts\n     * them to DatetimeParts. This is done so datetime-button\n     * can work with an array internally and not need\n     * to keep checking if the datetime value is `string` or `string[]`.\n     */\n    this.getParsedDateValues = value => {\n      if (value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      var _a, _b, _c, _d, _e;\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const {\n        value,\n        locale,\n        formatOptions,\n        hourCycle,\n        preferWheel,\n        multiple,\n        titleSelectedDatesFormatter\n      } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      if (!parsedDatetimes) {\n        return;\n      }\n      /**\n       * If developers incorrectly use multiple=\"true\"\n       * with non \"date\" datetimes, then just select\n       * the first value so the interface does\n       * not appear broken. Datetime will provide a\n       * warning in the console.\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const computedHourCycle = getHourCycle(locale, hourCycle);\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric'\n          });\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          } else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              } catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          } else {\n            this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : {\n              month: 'short',\n              day: 'numeric',\n              year: 'numeric'\n            });\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n          break;\n        case 'month-year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : {\n            month: 'long',\n            year: 'numeric'\n          });\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : {\n            month: 'long'\n          });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : {\n            year: 'numeric'\n          });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const {\n        datetimeEl\n      } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise(resolve => {\n        addEventListener(datetimeEl, 'ionRender', resolve, {\n          once: true\n        });\n      });\n    };\n    this.handleDateClick = async ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const {\n        overlayEl\n      } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), {\n          detail: {\n            ionShadowTarget: triggerEl\n          }\n        }));\n      } else {\n        overlayEl.present();\n      }\n    };\n    this.datetimePresentation = 'date-time';\n    this.dateText = undefined;\n    this.timeText = undefined;\n    this.datetimeActive = false;\n    this.selectedButton = undefined;\n    this.color = 'primary';\n    this.disabled = false;\n    this.datetime = undefined;\n  }\n  async componentWillLoad() {\n    const {\n      datetime\n    } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = this.datetimeEl = document.getElementById(datetime);\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * The element reference must be an ion-datetime. Print an error\n     * if a non-datetime element was provided.\n     */\n    if (datetimeEl.tagName !== 'ION-DATETIME') {\n      printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver(entries => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = this.overlayEl = datetimeEl.closest('ion-modal, ion-popover');\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = this.datetimePresentation = datetimeEl.presentation || 'date-time';\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const {\n      color,\n      dateText,\n      timeText,\n      selectedButton,\n      datetimeActive,\n      disabled\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'a38773e24ea0a28315be89baf0ef97f564b5d74b',\n      class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled\n      })\n    }, dateText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"date-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleDateClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.dateTargetEl = el\n    }, h(\"slot\", {\n      name: \"date-target\"\n    }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null)), timeText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"time-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleTimeClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.timeTargetEl = el\n    }, h(\"slot\", {\n      name: \"time-target\"\n    }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)));\n  }\n  get el() {\n    return this;\n  }\n  static get style() {\n    return {\n      ios: IonDatetimeButtonIosStyle0,\n      md: IonDatetimeButtonMdStyle0\n    };\n  }\n}, [33, \"ion-datetime-button\", {\n  \"color\": [513],\n  \"disabled\": [516],\n  \"datetime\": [1],\n  \"datetimePresentation\": [32],\n  \"dateText\": [32],\n  \"timeText\": [32],\n  \"datetimeActive\": [32],\n  \"selectedButton\": [32]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-datetime-button\", \"ion-ripple-effect\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-datetime-button\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, DatetimeButton);\n        }\n        break;\n      case \"ion-ripple-effect\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nconst IonDatetimeButton = DatetimeButton;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonDatetimeButton, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","h","Host","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","b","getIonMode","s","parseDate","x","getToday","L","getHourCycle","N","getLocalizedDateTime","M","getLocalizedTime","d","defineCustomElement$2","iosDatetimeButtonCss","IonDatetimeButtonIosStyle0","mdDatetimeButtonCss","IonDatetimeButtonMdStyle0","DatetimeButton","constructor","__registerHost","__attachShadow","datetimeEl","overlayEl","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","_a","_b","_c","_d","_e","datetimePresentation","locale","formatOptions","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","computedHourCycle","dateText","timeText","date","month","day","year","time","headerText","e","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","datetimeActive","color","disabled","datetime","componentWillLoad","el","document","getElementById","toLowerCase","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","key","class","id","onClick","part","ref","name","style","ios","md","defineCustomElement$1","customElements","components","forEach","get","define","IonDatetimeButton","defineCustomElement"],"sources":["D:/CIT/SEM 6/17MDCEL4 - Full Stack Web Application Development Laboratory/Online-Voting-Portal/client/node_modules/@ionic/core/components/ion-datetime-button.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { a as addEventListener, c as componentOnReady } from './helpers.js';\nimport { a as printIonError } from './index6.js';\nimport { c as createColorClasses } from './theme.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonIosStyle0 = iosDatetimeButtonCss;\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonMdStyle0 = mdDatetimeButtonCss;\n\nconst DatetimeButton = /*@__PURE__*/ proxyCustomElement(class DatetimeButton extends HTMLElement {\n    constructor() {\n        super();\n        this.__registerHost();\n        this.__attachShadow();\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            var _a, _b, _c, _d, _e;\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    break;\n                case 'month-year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'a38773e24ea0a28315be89baf0ef97f564b5d74b', class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n    }\n    get el() { return this; }\n    static get style() { return {\n        ios: IonDatetimeButtonIosStyle0,\n        md: IonDatetimeButtonMdStyle0\n    }; }\n}, [33, \"ion-datetime-button\", {\n        \"color\": [513],\n        \"disabled\": [516],\n        \"datetime\": [1],\n        \"datetimePresentation\": [32],\n        \"dateText\": [32],\n        \"timeText\": [32],\n        \"datetimeActive\": [32],\n        \"selectedButton\": [32]\n    }]);\nfunction defineCustomElement$1() {\n    if (typeof customElements === \"undefined\") {\n        return;\n    }\n    const components = [\"ion-datetime-button\", \"ion-ripple-effect\"];\n    components.forEach(tagName => { switch (tagName) {\n        case \"ion-datetime-button\":\n            if (!customElements.get(tagName)) {\n                customElements.define(tagName, DatetimeButton);\n            }\n            break;\n        case \"ion-ripple-effect\":\n            if (!customElements.get(tagName)) {\n                defineCustomElement$2();\n            }\n            break;\n    } });\n}\n\nconst IonDatetimeButton = DatetimeButton;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonDatetimeButton, defineCustomElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}