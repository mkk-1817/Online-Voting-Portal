{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { K as Keyboard } from './keyboard.js';\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\n// TODO(FW-2832): types\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\r\n * This is only used for tests\r\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = win => {\n  const nativeEngine = Keyboard.getEngine();\n  /**\r\n   * If the native keyboard plugin is available\r\n   * then we are running in a native environment. As a result\r\n   * we should only listen on the native events instead of\r\n   * using the Visual Viewport as the Ionic webview manipulates\r\n   * how it resizes such that the Visual Viewport API is not\r\n   * reliable here.\r\n   */\n  if (nativeEngine) {\n    startNativeListeners(win);\n  } else {\n    if (!win.visualViewport) {\n      return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    win.visualViewport.onresize = () => {\n      trackViewportChanges(win);\n      if (keyboardDidOpen() || keyboardDidResize(win)) {\n        setKeyboardOpen(win);\n      } else if (keyboardDidClose(win)) {\n        setKeyboardClose(win);\n      }\n    };\n  }\n};\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\nconst startNativeListeners = win => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = win => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;\n};\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\nconst keyboardDidResize = win => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\nconst keyboardDidClose = win => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\r\n * Dispatch a keyboard open event\r\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\r\n * Dispatch a keyboard close event\r\n */\nconst fireKeyboardCloseEvent = win => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\nconst trackViewportChanges = win => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\nconst copyVisualViewport = visualViewport => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };","map":{"version":3,"names":["K","Keyboard","KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","nativeEngine","getEngine","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"sources":["E:/Online-Voting-Portal/client/node_modules/@ionic/core/components/keyboard2.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { K as Keyboard } from './keyboard.js';\r\n\r\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\n// TODO(FW-2832): types\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n    previousVisualViewport = {};\r\n    currentVisualViewport = {};\r\n    keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n    const nativeEngine = Keyboard.getEngine();\r\n    /**\r\n     * If the native keyboard plugin is available\r\n     * then we are running in a native environment. As a result\r\n     * we should only listen on the native events instead of\r\n     * using the Visual Viewport as the Ionic webview manipulates\r\n     * how it resizes such that the Visual Viewport API is not\r\n     * reliable here.\r\n     */\r\n    if (nativeEngine) {\r\n        startNativeListeners(win);\r\n    }\r\n    else {\r\n        if (!win.visualViewport) {\r\n            return;\r\n        }\r\n        currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n        win.visualViewport.onresize = () => {\r\n            trackViewportChanges(win);\r\n            if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n                setKeyboardOpen(win);\r\n            }\r\n            else if (keyboardDidClose(win)) {\r\n                setKeyboardClose(win);\r\n            }\r\n        };\r\n    }\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n    win.addEventListener('keyboardDidShow', (ev) => setKeyboardOpen(win, ev));\r\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n    fireKeyboardOpenEvent(win, ev);\r\n    keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n    fireKeyboardCloseEvent(win);\r\n    keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n    return (!keyboardOpen &&\r\n        previousVisualViewport.width === currentVisualViewport.width &&\r\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n    return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n        detail: { keyboardHeight },\r\n    });\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n    return {\r\n        width: Math.round(visualViewport.width),\r\n        height: Math.round(visualViewport.height),\r\n        offsetTop: visualViewport.offsetTop,\r\n        offsetLeft: visualViewport.offsetLeft,\r\n        pageTop: visualViewport.pageTop,\r\n        pageLeft: visualViewport.pageLeft,\r\n        scale: visualViewport.scale,\r\n    };\r\n};\r\n\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}