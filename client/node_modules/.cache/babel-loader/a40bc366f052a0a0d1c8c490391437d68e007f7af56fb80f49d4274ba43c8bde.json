{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, readTask, h, Host } from '@stencil/core/internal/client';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index8.js';\nimport { t as transitionEndAsync, m as clamp, g as getElementRoot, c as componentOnReady, r as raf } from './helpers.js';\nimport { c as hapticImpact, I as ImpactStyle } from './haptic.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { s as shouldUseNativeRefresher, t as translateElement, a as setSpinnerOpacity, h as handleScrollWhileRefreshing, b as handleScrollWhilePulling, c as createPullingAnimation, d as createSnapBackAnimation, g as getRefresherAnimationType } from './refresher.utils.js';\nconst refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}@supports (inset-inline-start: 0){ion-refresher{inset-inline-start:0}}@supports not (inset-inline-start: 0){ion-refresher{left:0}:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}[dir=rtl] ion-refresher{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){ion-refresher:dir(rtl){left:unset;right:unset;right:0}}}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, #747577)}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nconst IonRefresherIosStyle0 = refresherIosCss;\nconst refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}@supports (inset-inline-start: 0){ion-refresher{inset-inline-start:0}}@supports not (inset-inline-start: 0){ion-refresher{left:0}:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}[dir=rtl] ion-refresher{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){ion-refresher:dir(rtl){left:unset;right:unset;right:0}}}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #3880ff)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #3880ff);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, #ececec);background:var(--ion-color-step-250, #ffffff);-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\nconst IonRefresherMdStyle0 = refresherMdCss;\nconst Refresher = /*@__PURE__*/proxyCustomElement(class Refresher extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    this.pointerDown = false;\n    this.needsCompletion = false;\n    this.didRefresh = false;\n    this.lastVelocityY = 0;\n    this.animations = [];\n    this.nativeRefresher = false;\n    this.state = 1 /* RefresherState.Inactive */;\n    this.pullMin = 60;\n    this.pullMax = this.pullMin + 60;\n    this.closeDuration = '280ms';\n    this.snapbackDuration = '280ms';\n    this.pullFactor = 1;\n    this.disabled = false;\n  }\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n  async checkNativeRefresher() {\n    const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\n    if (useNativeRefresher && !this.nativeRefresher) {\n      const contentEl = this.el.closest('ion-content');\n      this.setupNativeRefresher(contentEl);\n    } else if (!useNativeRefresher) {\n      this.destroyNativeRefresher();\n    }\n  }\n  destroyNativeRefresher() {\n    if (this.scrollEl && this.scrollListenerCallback) {\n      this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n      this.scrollListenerCallback = undefined;\n    }\n    this.nativeRefresher = false;\n  }\n  async resetNativeRefresher(el, state) {\n    this.state = state;\n    if (getIonMode(this) === 'ios') {\n      await translateElement(el, undefined, 300);\n    } else {\n      await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n    }\n    this.didRefresh = false;\n    this.needsCompletion = false;\n    this.pointerDown = false;\n    this.animations.forEach(ani => ani.destroy());\n    this.animations = [];\n    this.progress = 0;\n    this.state = 1 /* RefresherState.Inactive */;\n  }\n  async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\n    this.elementToTransform = this.scrollEl;\n    const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n    let MAX_PULL = this.scrollEl.clientHeight * 0.16;\n    const NUM_TICKS = ticks.length;\n    writeTask(() => ticks.forEach(el => el.style.setProperty('animation', 'none')));\n    this.scrollListenerCallback = () => {\n      // If pointer is not on screen or refresher is not active, ignore scroll\n      if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\n        return;\n      }\n      readTask(() => {\n        // PTR should only be active when overflow scrolling at the top\n        const scrollTop = this.scrollEl.scrollTop;\n        const refresherHeight = this.el.clientHeight;\n        if (scrollTop > 0) {\n          /**\n           * If refresher is refreshing and user tries to scroll\n           * progressively fade refresher out/in\n           */\n          if (this.state === 8 /* RefresherState.Refreshing */) {\n            const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n            writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\n            return;\n          }\n          return;\n        }\n        if (this.pointerDown) {\n          if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n          }\n          // emit \"pulling\" on every move\n          if (this.pointerDown) {\n            this.ionPull.emit();\n          }\n        }\n        /**\n         * We want to delay the start of this gesture by ~30px\n         * when initially pulling down so the refresher does not\n         * overlap with the content. But when letting go of the\n         * gesture before the refresher completes, we want the\n         * refresher tick marks to quickly fade out.\n         */\n        const offset = this.didStart ? 30 : 0;\n        const pullAmount = this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1);\n        const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n        if (shouldShowRefreshingSpinner) {\n          if (this.pointerDown) {\n            handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\n          }\n          if (!this.didRefresh) {\n            this.beginRefresh();\n            this.didRefresh = true;\n            hapticImpact({\n              style: ImpactStyle.Light\n            });\n            /**\n             * Translate the content element otherwise when pointer is removed\n             * from screen the scroll content will bounce back over the refresher\n             */\n            if (!this.pointerDown) {\n              translateElement(this.elementToTransform, `${refresherHeight}px`);\n            }\n          }\n        } else {\n          this.state = 2 /* RefresherState.Pulling */;\n          handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n        }\n      });\n    };\n    this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n    this.gesture = (await import('./index3.js')).createGesture({\n      el: this.scrollEl,\n      gestureName: 'refresher',\n      gesturePriority: 31,\n      direction: 'y',\n      threshold: 5,\n      onStart: () => {\n        this.pointerDown = true;\n        if (!this.didRefresh) {\n          translateElement(this.elementToTransform, '0px');\n        }\n        /**\n         * If the content had `display: none` when\n         * the refresher was initialized, its clientHeight\n         * will be 0. When the gesture starts, the content\n         * will be visible, so try to get the correct\n         * client height again. This is most common when\n         * using the refresher in an ion-menu.\n         */\n        if (MAX_PULL === 0) {\n          MAX_PULL = this.scrollEl.clientHeight * 0.16;\n        }\n      },\n      onMove: ev => {\n        this.lastVelocityY = ev.velocityY;\n      },\n      onEnd: () => {\n        this.pointerDown = false;\n        this.didStart = false;\n        if (this.needsCompletion) {\n          this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\n          this.needsCompletion = false;\n        } else if (this.didRefresh) {\n          readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\n        }\n      }\n    });\n    this.disabledChanged();\n  }\n  async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\n    const circle = getElementRoot(pullingSpinner).querySelector('circle');\n    const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n    const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n    if (circle !== null && refreshingCircle !== null) {\n      writeTask(() => {\n        circle.style.setProperty('animation', 'none');\n        // This lines up the animation on the refreshing spinner with the pulling spinner\n        refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n        refreshingCircle.style.setProperty('animation-delay', '-655ms');\n      });\n    }\n    this.gesture = (await import('./index3.js')).createGesture({\n      el: this.scrollEl,\n      gestureName: 'refresher',\n      gesturePriority: 31,\n      direction: 'y',\n      threshold: 5,\n      canStart: () => this.state !== 8 /* RefresherState.Refreshing */ && this.state !== 32 /* RefresherState.Completing */ && this.scrollEl.scrollTop === 0,\n      onStart: ev => {\n        this.progress = 0;\n        ev.data = {\n          animation: undefined,\n          didStart: false,\n          cancelled: false\n        };\n      },\n      onMove: ev => {\n        if (ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart || ev.data.cancelled) {\n          ev.data.cancelled = true;\n          return;\n        }\n        if (!ev.data.didStart) {\n          ev.data.didStart = true;\n          this.state = 2 /* RefresherState.Pulling */;\n          // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n          const {\n            scrollEl\n          } = this;\n          const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n          writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\n          const animationType = getRefresherAnimationType(contentEl);\n          const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\n          ev.data.animation = animation;\n          animation.progressStart(false, 0);\n          this.ionStart.emit();\n          this.animations.push(animation);\n          return;\n        }\n        // Since we are using an easing curve, slow the gesture tracking down a bit\n        this.progress = clamp(0, ev.deltaY / 180 * 0.5, 1);\n        ev.data.animation.progressStep(this.progress);\n        this.ionPull.emit();\n      },\n      onEnd: ev => {\n        if (!ev.data.didStart) {\n          return;\n        }\n        this.gesture.enable(false);\n        const {\n          scrollEl\n        } = this;\n        const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n        writeTask(() => scrollEl.style.removeProperty(overflowProperty));\n        if (this.progress <= 0.4) {\n          ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\n            this.animations.forEach(ani => ani.destroy());\n            this.animations = [];\n            this.gesture.enable(true);\n            this.state = 1 /* RefresherState.Inactive */;\n          });\n          return;\n        }\n        const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\n        const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n        this.animations.push(snapBackAnimation);\n        writeTask(async () => {\n          pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\n          ev.data.animation.progressEnd();\n          await snapBackAnimation.play();\n          this.beginRefresh();\n          ev.data.animation.destroy();\n          this.gesture.enable(true);\n        });\n      }\n    });\n    this.disabledChanged();\n  }\n  async setupNativeRefresher(contentEl) {\n    if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\n      return;\n    }\n    /**\n     * If using non-native refresher before make sure\n     * we clean up any old CSS. This can happen when\n     * a user manually calls the refresh method in a\n     * component create callback before the native\n     * refresher is setup.\n     */\n    this.setCss(0, '', false, '');\n    this.nativeRefresher = true;\n    const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n    const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n    if (getIonMode(this) === 'ios') {\n      this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n    } else {\n      this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n    }\n  }\n  componentDidUpdate() {\n    this.checkNativeRefresher();\n  }\n  async connectedCallback() {\n    if (this.el.getAttribute('slot') !== 'fixed') {\n      console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n      return;\n    }\n    const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n    if (!contentEl) {\n      printIonContentErrorMsg(this.el);\n      return;\n    }\n    /**\n     * Waits for the content to be ready before querying the scroll\n     * or the background content element.\n     */\n    componentOnReady(contentEl, async () => {\n      const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n      /**\n       * Query the custom scroll target (if available), first. In refresher implementations,\n       * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n       * querying the custom scroll target first and falling back to the ion-content element,\n       * the correct scroll element will be returned by the implementation.\n       */\n      this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n      /**\n       * Query the background content element from the host ion-content element directly.\n       */\n      this.backgroundContentEl = await contentEl.getBackgroundElement();\n      if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\n        this.setupNativeRefresher(contentEl);\n      } else {\n        this.gesture = (await import('./index3.js')).createGesture({\n          el: contentEl,\n          gestureName: 'refresher',\n          gesturePriority: 31,\n          direction: 'y',\n          threshold: 20,\n          passive: false,\n          canStart: () => this.canStart(),\n          onStart: () => this.onStart(),\n          onMove: ev => this.onMove(ev),\n          onEnd: () => this.onEnd()\n        });\n        this.disabledChanged();\n      }\n    });\n  }\n  disconnectedCallback() {\n    this.destroyNativeRefresher();\n    this.scrollEl = undefined;\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Call `complete()` when your async operation has completed.\n   * For example, the `refreshing` state is while the app is performing\n   * an asynchronous operation, such as receiving more data from an\n   * AJAX request. Once the data has been received, you then call this\n   * method to signify that the refreshing has completed and to close\n   * the refresher. This method also changes the refresher's state from\n   * `refreshing` to `completing`.\n   */\n  async complete() {\n    if (this.nativeRefresher) {\n      this.needsCompletion = true;\n      // Do not reset scroll el until user removes pointer from screen\n      if (!this.pointerDown) {\n        raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\n      }\n    } else {\n      this.close(32 /* RefresherState.Completing */, '120ms');\n    }\n  }\n  /**\n   * Changes the refresher's state from `refreshing` to `cancelling`.\n   */\n  async cancel() {\n    if (this.nativeRefresher) {\n      // Do not reset scroll el until user removes pointer from screen\n      if (!this.pointerDown) {\n        raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\n      }\n    } else {\n      this.close(16 /* RefresherState.Cancelling */, '');\n    }\n  }\n  /**\n   * A number representing how far down the user has pulled.\n   * The number `0` represents the user hasn't pulled down at all. The\n   * number `1`, and anything greater than `1`, represents that the user\n   * has pulled far enough down that when they let go then the refresh will\n   * happen. If they let go and the number is less than `1`, then the\n   * refresh will not happen, and the content will return to it's original\n   * position.\n   */\n  getProgress() {\n    return Promise.resolve(this.progress);\n  }\n  canStart() {\n    if (!this.scrollEl) {\n      return false;\n    }\n    if (this.state !== 1 /* RefresherState.Inactive */) {\n      return false;\n    }\n    // if the scrollTop is greater than zero then it's\n    // not possible to pull the content down yet\n    if (this.scrollEl.scrollTop > 0) {\n      return false;\n    }\n    return true;\n  }\n  onStart() {\n    this.progress = 0;\n    this.state = 1 /* RefresherState.Inactive */;\n    this.memoizeOverflowStyle();\n  }\n  onMove(detail) {\n    if (!this.scrollEl) {\n      return;\n    }\n    // this method can get called like a bazillion times per second,\n    // so it's built to be as efficient as possible, and does its\n    // best to do any DOM read/writes only when absolutely necessary\n    // if multi-touch then get out immediately\n    const ev = detail.event;\n    if (ev.touches !== undefined && ev.touches.length > 1) {\n      return;\n    }\n    // do nothing if it's actively refreshing\n    // or it's in the way of closing\n    // or this was never a startY\n    if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n      return;\n    }\n    const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n    const deltaY = detail.deltaY * pullFactor;\n    // don't bother if they're scrolling up\n    // and have not already started dragging\n    if (deltaY <= 0) {\n      // the current Y is higher than the starting Y\n      // so they scrolled up enough to be ignored\n      this.progress = 0;\n      this.state = 1 /* RefresherState.Inactive */;\n      if (this.appliedStyles) {\n        // reset the styles only if they were applied\n        this.setCss(0, '', false, '');\n        return;\n      }\n      return;\n    }\n    if (this.state === 1 /* RefresherState.Inactive */) {\n      // this refresh is not already actively pulling down\n      // get the content's scrollTop\n      const scrollHostScrollTop = this.scrollEl.scrollTop;\n      // if the scrollTop is greater than zero then it's\n      // not possible to pull the content down yet\n      if (scrollHostScrollTop > 0) {\n        this.progress = 0;\n        return;\n      }\n      // content scrolled all the way to the top, and dragging down\n      this.state = 2 /* RefresherState.Pulling */;\n    }\n    // prevent native scroll events\n    if (ev.cancelable) {\n      ev.preventDefault();\n    }\n    // the refresher is actively pulling at this point\n    // move the scroll element within the content element\n    this.setCss(deltaY, '0ms', true, '');\n    if (deltaY === 0) {\n      // don't continue if there's no delta yet\n      this.progress = 0;\n      return;\n    }\n    const pullMin = this.pullMin;\n    // set pull progress\n    this.progress = deltaY / pullMin;\n    // emit \"start\" if it hasn't started yet\n    if (!this.didStart) {\n      this.didStart = true;\n      this.ionStart.emit();\n    }\n    // emit \"pulling\" on every move\n    this.ionPull.emit();\n    // do nothing if the delta is less than the pull threshold\n    if (deltaY < pullMin) {\n      // ensure it stays in the pulling state, cuz its not ready yet\n      this.state = 2 /* RefresherState.Pulling */;\n      return;\n    }\n    if (deltaY > this.pullMax) {\n      // they pulled farther than the max, so kick off the refresh\n      this.beginRefresh();\n      return;\n    }\n    // pulled farther than the pull min!!\n    // it is now in the `ready` state!!\n    // if they let go then it'll refresh, kerpow!!\n    this.state = 4 /* RefresherState.Ready */;\n    return;\n  }\n  onEnd() {\n    // only run in a zone when absolutely necessary\n    if (this.state === 4 /* RefresherState.Ready */) {\n      // they pulled down far enough, so it's ready to refresh\n      this.beginRefresh();\n    } else if (this.state === 2 /* RefresherState.Pulling */) {\n      // they were pulling down, but didn't pull down far enough\n      // set the content back to it's original location\n      // and close the refresher\n      // set that the refresh is actively cancelling\n      this.cancel();\n    } else if (this.state === 1 /* RefresherState.Inactive */) {\n      /**\n       * The pull to refresh gesture was aborted\n       * so we should immediately restore any overflow styles\n       * that have been modified. Do not call this.cancel\n       * because the styles will only be reset after a timeout.\n       * If the gesture is aborted then scrolling should be\n       * available right away.\n       */\n      this.restoreOverflowStyle();\n    }\n  }\n  beginRefresh() {\n    // assumes we're already back in a zone\n    // they pulled down far enough, so it's ready to refresh\n    this.state = 8 /* RefresherState.Refreshing */;\n    // place the content in a hangout position while it thinks\n    this.setCss(this.pullMin, this.snapbackDuration, true, '');\n    // emit \"refresh\" because it was pulled down far enough\n    // and they let go to begin refreshing\n    this.ionRefresh.emit({\n      complete: this.complete.bind(this)\n    });\n  }\n  close(state, delay) {\n    // create fallback timer incase something goes wrong with transitionEnd event\n    setTimeout(() => {\n      this.state = 1 /* RefresherState.Inactive */;\n      this.progress = 0;\n      this.didStart = false;\n      /**\n       * Reset any overflow styles so the\n       * user can scroll again.\n       */\n      this.setCss(0, '0ms', false, '', true);\n    }, 600);\n    // reset the styles on the scroll element\n    // set that the refresh is actively cancelling/completing\n    this.state = state;\n    this.setCss(0, this.closeDuration, true, delay);\n  }\n  setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\n    if (this.nativeRefresher) {\n      return;\n    }\n    this.appliedStyles = y > 0;\n    writeTask(() => {\n      if (this.scrollEl && this.backgroundContentEl) {\n        const scrollStyle = this.scrollEl.style;\n        const backgroundStyle = this.backgroundContentEl.style;\n        scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\n        scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n        scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n        scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n      }\n      /**\n       * Reset the overflow styles only once\n       * the pull to refresh effect has been closed.\n       * This ensures that the gesture is done\n       * and the refresh operation has either\n       * been aborted or has completed.\n       */\n      if (shouldRestoreOverflowStyle) {\n        this.restoreOverflowStyle();\n      }\n    });\n  }\n  memoizeOverflowStyle() {\n    if (this.scrollEl) {\n      const {\n        overflow,\n        overflowX,\n        overflowY\n      } = this.scrollEl.style;\n      this.overflowStyles = {\n        overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n        overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n        overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : ''\n      };\n    }\n  }\n  restoreOverflowStyle() {\n    if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n      const {\n        overflow,\n        overflowX,\n        overflowY\n      } = this.overflowStyles;\n      this.scrollEl.style.overflow = overflow;\n      this.scrollEl.style.overflowX = overflowX;\n      this.scrollEl.style.overflowY = overflowY;\n      this.overflowStyles = undefined;\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'af60b9453ee4bbf61ed9651d509700fddd91f2c2',\n      slot: \"fixed\",\n      class: {\n        [mode]: true,\n        // Used internally for styling\n        [`refresher-${mode}`]: true,\n        'refresher-native': this.nativeRefresher,\n        'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\n        'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\n        'refresher-ready': this.state === 4 /* RefresherState.Ready */,\n        'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\n        'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\n        'refresher-completing': this.state === 32 /* RefresherState.Completing */\n      }\n    });\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: IonRefresherIosStyle0,\n      md: IonRefresherMdStyle0\n    };\n  }\n}, [32, \"ion-refresher\", {\n  \"pullMin\": [2, \"pull-min\"],\n  \"pullMax\": [2, \"pull-max\"],\n  \"closeDuration\": [1, \"close-duration\"],\n  \"snapbackDuration\": [1, \"snapback-duration\"],\n  \"pullFactor\": [2, \"pull-factor\"],\n  \"disabled\": [4],\n  \"nativeRefresher\": [32],\n  \"state\": [32],\n  \"complete\": [64],\n  \"cancel\": [64],\n  \"getProgress\": [64]\n}, undefined, {\n  \"disabled\": [\"disabledChanged\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-refresher\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-refresher\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Refresher);\n        }\n        break;\n    }\n  });\n}\nconst IonRefresher = Refresher;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonRefresher, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","readTask","h","Host","g","getTimeGivenProgression","I","ION_CONTENT_CLASS_SELECTOR","b","ION_CONTENT_ELEMENT_SELECTOR","p","printIonContentErrorMsg","getScrollElement","t","transitionEndAsync","m","clamp","getElementRoot","c","componentOnReady","r","raf","hapticImpact","ImpactStyle","getIonMode","s","shouldUseNativeRefresher","translateElement","a","setSpinnerOpacity","handleScrollWhileRefreshing","handleScrollWhilePulling","createPullingAnimation","d","createSnapBackAnimation","getRefresherAnimationType","refresherIosCss","IonRefresherIosStyle0","refresherMdCss","IonRefresherMdStyle0","Refresher","constructor","__registerHost","ionRefresh","ionPull","ionStart","appliedStyles","didStart","progress","pointerDown","needsCompletion","didRefresh","lastVelocityY","animations","nativeRefresher","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","disabledChanged","gesture","enable","checkNativeRefresher","useNativeRefresher","el","contentEl","closest","setupNativeRefresher","destroyNativeRefresher","scrollEl","scrollListenerCallback","removeEventListener","undefined","resetNativeRefresher","querySelector","forEach","ani","destroy","setupiOSNativeRefresher","pullingSpinner","refreshingSpinner","elementToTransform","ticks","shadowRoot","querySelectorAll","MAX_PULL","clientHeight","NUM_TICKS","length","style","setProperty","scrollTop","refresherHeight","ratio","emit","offset","pullAmount","Math","abs","shouldShowRefreshingSpinner","beginRefresh","Light","addEventListener","createGesture","gestureName","gesturePriority","direction","threshold","onStart","onMove","ev","velocityY","onEnd","setupMDNativeRefresher","circle","pullingRefresherIcon","refreshingCircle","canStart","data","animation","cancelled","overflowProperty","matches","animationType","progressStart","push","deltaY","progressStep","removeProperty","progressEnd","onFinish","snapBackAnimation","play","setCss","componentDidUpdate","connectedCallback","getAttribute","console","error","customScrollTarget","backgroundContentEl","getBackgroundElement","passive","disconnectedCallback","complete","close","cancel","getProgress","Promise","resolve","memoizeOverflowStyle","detail","event","touches","Number","isNaN","scrollHostScrollTop","cancelable","preventDefault","restoreOverflowStyle","bind","delay","setTimeout","y","duration","overflowVisible","shouldRestoreOverflowStyle","scrollStyle","backgroundStyle","transform","transitionDuration","transitionDelay","overflow","overflowX","overflowY","overflowStyles","render","mode","key","slot","class","watchers","ios","md","defineCustomElement$1","customElements","components","tagName","get","define","IonRefresher","defineCustomElement"],"sources":["D:/CIT/SEM 6/17MDCEL4 - Full Stack Web Application Development Laboratory/Online-Voting-Portal/client/node_modules/@ionic/core/components/ion-refresher.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, readTask, h, Host } from '@stencil/core/internal/client';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index8.js';\nimport { t as transitionEndAsync, m as clamp, g as getElementRoot, c as componentOnReady, r as raf } from './helpers.js';\nimport { c as hapticImpact, I as ImpactStyle } from './haptic.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { s as shouldUseNativeRefresher, t as translateElement, a as setSpinnerOpacity, h as handleScrollWhileRefreshing, b as handleScrollWhilePulling, c as createPullingAnimation, d as createSnapBackAnimation, g as getRefresherAnimationType } from './refresher.utils.js';\n\nconst refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}@supports (inset-inline-start: 0){ion-refresher{inset-inline-start:0}}@supports not (inset-inline-start: 0){ion-refresher{left:0}:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}[dir=rtl] ion-refresher{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){ion-refresher:dir(rtl){left:unset;right:unset;right:0}}}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, #747577)}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nconst IonRefresherIosStyle0 = refresherIosCss;\n\nconst refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}@supports (inset-inline-start: 0){ion-refresher{inset-inline-start:0}}@supports not (inset-inline-start: 0){ion-refresher{left:0}:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}[dir=rtl] ion-refresher{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){ion-refresher:dir(rtl){left:unset;right:unset;right:0}}}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #3880ff)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #3880ff);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, #ececec);background:var(--ion-color-step-250, #ffffff);-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\nconst IonRefresherMdStyle0 = refresherMdCss;\n\nconst Refresher = /*@__PURE__*/ proxyCustomElement(class Refresher extends HTMLElement {\n    constructor() {\n        super();\n        this.__registerHost();\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        this.pointerDown = false;\n        this.needsCompletion = false;\n        this.didRefresh = false;\n        this.lastVelocityY = 0;\n        this.animations = [];\n        this.nativeRefresher = false;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.pullMin = 60;\n        this.pullMax = this.pullMin + 60;\n        this.closeDuration = '280ms';\n        this.snapbackDuration = '280ms';\n        this.pullFactor = 1;\n        this.disabled = false;\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async checkNativeRefresher() {\n        const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\n        if (useNativeRefresher && !this.nativeRefresher) {\n            const contentEl = this.el.closest('ion-content');\n            this.setupNativeRefresher(contentEl);\n        }\n        else if (!useNativeRefresher) {\n            this.destroyNativeRefresher();\n        }\n    }\n    destroyNativeRefresher() {\n        if (this.scrollEl && this.scrollListenerCallback) {\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n            this.scrollListenerCallback = undefined;\n        }\n        this.nativeRefresher = false;\n    }\n    async resetNativeRefresher(el, state) {\n        this.state = state;\n        if (getIonMode(this) === 'ios') {\n            await translateElement(el, undefined, 300);\n        }\n        else {\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n        }\n        this.didRefresh = false;\n        this.needsCompletion = false;\n        this.pointerDown = false;\n        this.animations.forEach((ani) => ani.destroy());\n        this.animations = [];\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n    }\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\n        this.elementToTransform = this.scrollEl;\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n        let MAX_PULL = this.scrollEl.clientHeight * 0.16;\n        const NUM_TICKS = ticks.length;\n        writeTask(() => ticks.forEach((el) => el.style.setProperty('animation', 'none')));\n        this.scrollListenerCallback = () => {\n            // If pointer is not on screen or refresher is not active, ignore scroll\n            if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\n                return;\n            }\n            readTask(() => {\n                // PTR should only be active when overflow scrolling at the top\n                const scrollTop = this.scrollEl.scrollTop;\n                const refresherHeight = this.el.clientHeight;\n                if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (this.state === 8 /* RefresherState.Refreshing */) {\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\n                        return;\n                    }\n                    return;\n                }\n                if (this.pointerDown) {\n                    if (!this.didStart) {\n                        this.didStart = true;\n                        this.ionStart.emit();\n                    }\n                    // emit \"pulling\" on every move\n                    if (this.pointerDown) {\n                        this.ionPull.emit();\n                    }\n                }\n                /**\n                 * We want to delay the start of this gesture by ~30px\n                 * when initially pulling down so the refresher does not\n                 * overlap with the content. But when letting go of the\n                 * gesture before the refresher completes, we want the\n                 * refresher tick marks to quickly fade out.\n                 */\n                const offset = this.didStart ? 30 : 0;\n                const pullAmount = (this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1));\n                const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n                if (shouldShowRefreshingSpinner) {\n                    if (this.pointerDown) {\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\n                    }\n                    if (!this.didRefresh) {\n                        this.beginRefresh();\n                        this.didRefresh = true;\n                        hapticImpact({ style: ImpactStyle.Light });\n                        /**\n                         * Translate the content element otherwise when pointer is removed\n                         * from screen the scroll content will bounce back over the refresher\n                         */\n                        if (!this.pointerDown) {\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\n                        }\n                    }\n                }\n                else {\n                    this.state = 2 /* RefresherState.Pulling */;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                }\n            });\n        };\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n        this.gesture = (await import('./index3.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            onStart: () => {\n                this.pointerDown = true;\n                if (!this.didRefresh) {\n                    translateElement(this.elementToTransform, '0px');\n                }\n                /**\n                 * If the content had `display: none` when\n                 * the refresher was initialized, its clientHeight\n                 * will be 0. When the gesture starts, the content\n                 * will be visible, so try to get the correct\n                 * client height again. This is most common when\n                 * using the refresher in an ion-menu.\n                 */\n                if (MAX_PULL === 0) {\n                    MAX_PULL = this.scrollEl.clientHeight * 0.16;\n                }\n            },\n            onMove: (ev) => {\n                this.lastVelocityY = ev.velocityY;\n            },\n            onEnd: () => {\n                this.pointerDown = false;\n                this.didStart = false;\n                if (this.needsCompletion) {\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\n                    this.needsCompletion = false;\n                }\n                else if (this.didRefresh) {\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\n                }\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\n        const circle = getElementRoot(pullingSpinner).querySelector('circle');\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n        const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n        if (circle !== null && refreshingCircle !== null) {\n            writeTask(() => {\n                circle.style.setProperty('animation', 'none');\n                // This lines up the animation on the refreshing spinner with the pulling spinner\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\n            });\n        }\n        this.gesture = (await import('./index3.js')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            canStart: () => this.state !== 8 /* RefresherState.Refreshing */ &&\n                this.state !== 32 /* RefresherState.Completing */ &&\n                this.scrollEl.scrollTop === 0,\n            onStart: (ev) => {\n                this.progress = 0;\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\n            },\n            onMove: (ev) => {\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                }\n                if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    this.state = 2 /* RefresherState.Pulling */;\n                    // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n                    const { scrollEl } = this;\n                    const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                    writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\n                    const animationType = getRefresherAnimationType(contentEl);\n                    const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n                    this.ionStart.emit();\n                    this.animations.push(animation);\n                    return;\n                }\n                // Since we are using an easing curve, slow the gesture tracking down a bit\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\n                ev.data.animation.progressStep(this.progress);\n                this.ionPull.emit();\n            },\n            onEnd: (ev) => {\n                if (!ev.data.didStart) {\n                    return;\n                }\n                this.gesture.enable(false);\n                const { scrollEl } = this;\n                const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                writeTask(() => scrollEl.style.removeProperty(overflowProperty));\n                if (this.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\n                        this.animations.forEach((ani) => ani.destroy());\n                        this.animations = [];\n                        this.gesture.enable(true);\n                        this.state = 1 /* RefresherState.Inactive */;\n                    });\n                    return;\n                }\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n                this.animations.push(snapBackAnimation);\n                writeTask(async () => {\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\n                    ev.data.animation.progressEnd();\n                    await snapBackAnimation.play();\n                    this.beginRefresh();\n                    ev.data.animation.destroy();\n                    this.gesture.enable(true);\n                });\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupNativeRefresher(contentEl) {\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\n            return;\n        }\n        /**\n         * If using non-native refresher before make sure\n         * we clean up any old CSS. This can happen when\n         * a user manually calls the refresh method in a\n         * component create callback before the native\n         * refresher is setup.\n         */\n        this.setCss(0, '', false, '');\n        this.nativeRefresher = true;\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n        if (getIonMode(this) === 'ios') {\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n        }\n        else {\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n        }\n    }\n    componentDidUpdate() {\n        this.checkNativeRefresher();\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        /**\n         * Waits for the content to be ready before querying the scroll\n         * or the background content element.\n         */\n        componentOnReady(contentEl, async () => {\n            const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n            /**\n             * Query the custom scroll target (if available), first. In refresher implementations,\n             * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n             * querying the custom scroll target first and falling back to the ion-content element,\n             * the correct scroll element will be returned by the implementation.\n             */\n            this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n            /**\n             * Query the background content element from the host ion-content element directly.\n             */\n            this.backgroundContentEl = await contentEl.getBackgroundElement();\n            if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\n                this.setupNativeRefresher(contentEl);\n            }\n            else {\n                this.gesture = (await import('./index3.js')).createGesture({\n                    el: contentEl,\n                    gestureName: 'refresher',\n                    gesturePriority: 31,\n                    direction: 'y',\n                    threshold: 20,\n                    passive: false,\n                    canStart: () => this.canStart(),\n                    onStart: () => this.onStart(),\n                    onMove: (ev) => this.onMove(ev),\n                    onEnd: () => this.onEnd(),\n                });\n                this.disabledChanged();\n            }\n        });\n    }\n    disconnectedCallback() {\n        this.destroyNativeRefresher();\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        if (this.nativeRefresher) {\n            this.needsCompletion = true;\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\n            }\n        }\n        else {\n            this.close(32 /* RefresherState.Completing */, '120ms');\n        }\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        if (this.nativeRefresher) {\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\n            }\n        }\n        else {\n            this.close(16 /* RefresherState.Cancelling */, '');\n        }\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* RefresherState.Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.memoizeOverflowStyle();\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches !== undefined && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* RefresherState.Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* RefresherState.Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* RefresherState.Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* RefresherState.Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* RefresherState.Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* RefresherState.Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* RefresherState.Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n        else if (this.state === 1 /* RefresherState.Inactive */) {\n            /**\n             * The pull to refresh gesture was aborted\n             * so we should immediately restore any overflow styles\n             * that have been modified. Do not call this.cancel\n             * because the styles will only be reset after a timeout.\n             * If the gesture is aborted then scrolling should be\n             * available right away.\n             */\n            this.restoreOverflowStyle();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* RefresherState.Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this),\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* RefresherState.Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            /**\n             * Reset any overflow styles so the\n             * user can scroll again.\n             */\n            this.setCss(0, '0ms', false, '', true);\n        }, 600);\n        // reset the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n    }\n    setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\n        if (this.nativeRefresher) {\n            return;\n        }\n        this.appliedStyles = y > 0;\n        writeTask(() => {\n            if (this.scrollEl && this.backgroundContentEl) {\n                const scrollStyle = this.scrollEl.style;\n                const backgroundStyle = this.backgroundContentEl.style;\n                scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n                scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n            }\n            /**\n             * Reset the overflow styles only once\n             * the pull to refresh effect has been closed.\n             * This ensures that the gesture is done\n             * and the refresh operation has either\n             * been aborted or has completed.\n             */\n            if (shouldRestoreOverflowStyle) {\n                this.restoreOverflowStyle();\n            }\n        });\n    }\n    memoizeOverflowStyle() {\n        if (this.scrollEl) {\n            const { overflow, overflowX, overflowY } = this.scrollEl.style;\n            this.overflowStyles = {\n                overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n                overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n                overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : '',\n            };\n        }\n    }\n    restoreOverflowStyle() {\n        if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n            const { overflow, overflowX, overflowY } = this.overflowStyles;\n            this.scrollEl.style.overflow = overflow;\n            this.scrollEl.style.overflowX = overflowX;\n            this.scrollEl.style.overflowY = overflowY;\n            this.overflowStyles = undefined;\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'af60b9453ee4bbf61ed9651d509700fddd91f2c2', slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-native': this.nativeRefresher,\n                'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\n                'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\n                'refresher-ready': this.state === 4 /* RefresherState.Ready */,\n                'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\n                'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\n                'refresher-completing': this.state === 32 /* RefresherState.Completing */,\n            } }));\n    }\n    get el() { return this; }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return {\n        ios: IonRefresherIosStyle0,\n        md: IonRefresherMdStyle0\n    }; }\n}, [32, \"ion-refresher\", {\n        \"pullMin\": [2, \"pull-min\"],\n        \"pullMax\": [2, \"pull-max\"],\n        \"closeDuration\": [1, \"close-duration\"],\n        \"snapbackDuration\": [1, \"snapback-duration\"],\n        \"pullFactor\": [2, \"pull-factor\"],\n        \"disabled\": [4],\n        \"nativeRefresher\": [32],\n        \"state\": [32],\n        \"complete\": [64],\n        \"cancel\": [64],\n        \"getProgress\": [64]\n    }, undefined, {\n        \"disabled\": [\"disabledChanged\"]\n    }]);\nfunction defineCustomElement$1() {\n    if (typeof customElements === \"undefined\") {\n        return;\n    }\n    const components = [\"ion-refresher\"];\n    components.forEach(tagName => { switch (tagName) {\n        case \"ion-refresher\":\n            if (!customElements.get(tagName)) {\n                customElements.define(tagName, Refresher);\n            }\n            break;\n    } });\n}\n\nconst IonRefresher = Refresher;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonRefresher, defineCustomElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}