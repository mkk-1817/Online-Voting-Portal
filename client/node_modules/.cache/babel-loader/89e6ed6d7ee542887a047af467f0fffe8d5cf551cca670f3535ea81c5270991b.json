{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { w as win, d as doc } from './index5.js';\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = input => {\n  /**\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\r\n   * Calling getRootNode on an element in standard web page will return HTMLDocument.\r\n   * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\r\n   * Calling getRootNode on an element that is not attached to a document/shadow tree will return\r\n   * the root of the DOM tree it belongs to.\r\n   * isFocused is used for the hide-caret utility which only considers input/textarea elements\r\n   * that are present in the DOM, so we don't set types for that final case since it does not apply.\r\n   */\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\r\n   * Making the cloned input disabled prevents\r\n   * Chrome for Android from still scrolling\r\n   * the entire page since this cloned input\r\n   * will briefly be hidden by the keyboard\r\n   * even though it is not focused.\r\n   *\r\n   * This is not needed on iOS. While this\r\n   * does not cause functional issues on iOS,\r\n   * the input still appears slightly dimmed even\r\n   * if we set opacity: 1.\r\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\nconst SCROLL_AMOUNT_PADDING = 50;\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = shouldHideCaret => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = ev => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  } else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, {\n    once: true\n  });\n};\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\r\n   * Scroll padding should only be added if:\r\n   * 1. The global scrollPadding config option\r\n   * is set to true.\r\n   * 2. The native keyboard resize mode is either \"none\"\r\n   * (keyboard overlays webview) or undefined (resize\r\n   * information unavailable)\r\n   * Resize info is available on Capacitor 4+\r\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\r\n   * This tracks whether or not the keyboard has been\r\n   * presented for a single focused text field. Note\r\n   * that it does not track if the keyboard is open\r\n   * in general such as if the keyboard is open for\r\n   * a different focused text field.\r\n   */\n  let hasKeyboardBeenPresentedForTextField = false;\n  /**\r\n   * When adding scroll padding we need to know\r\n   * how much of the viewport the keyboard obscures.\r\n   * We do this by subtracting the keyboard height\r\n   * from the platform height.\r\n   *\r\n   * If we compute this value when switching between\r\n   * inputs then the webview may already be resized.\r\n   * At this point, `win.innerHeight` has already accounted\r\n   * for the keyboard meaning we would then subtract\r\n   * the keyboard height again. This will result in the input\r\n   * being scrolled more than it needs to.\r\n   */\n  const platformHeight = win !== undefined ? win.innerHeight : 0;\n  /**\r\n   * Scroll assist is run when a text field\r\n   * is focused. However, it may need to\r\n   * re-run when the keyboard size changes\r\n   * such that the text field is now hidden\r\n   * underneath the keyboard.\r\n   * This function re-runs scroll assist\r\n   * when that happens.\r\n   *\r\n   * One limitation of this is on a web browser\r\n   * where native keyboard APIs do not have cross-browser\r\n   * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\r\n   * This means that if the keyboard changes but does not change\r\n   * geometry, then scroll assist will not re-run even if\r\n   * the user has scrolled the text field under the keyboard.\r\n   * This is not a problem when running in Cordova/Capacitor\r\n   * because `ionKeyboardDidShow` uses the native events\r\n   * which fire every time the keyboard changes.\r\n   */\n  const keyboardShow = ev => {\n    /**\r\n     * If the keyboard has not yet been presented\r\n     * for this text field then the text field has just\r\n     * received focus. In that case, the focusin listener\r\n     * will run scroll assist.\r\n     */\n    if (hasKeyboardBeenPresentedForTextField === false) {\n      hasKeyboardBeenPresentedForTextField = true;\n      return;\n    }\n    /**\r\n     * Otherwise, the keyboard has already been presented\r\n     * for the focused text field.\r\n     * This means that the keyboard likely changed\r\n     * geometry, and we need to re-run scroll assist.\r\n     * This can happen when the user rotates their device\r\n     * or when they switch keyboards.\r\n     *\r\n     * Make sure we pass in the computed keyboard height\r\n     * rather than the estimated keyboard height.\r\n     *\r\n     * Since the keyboard is already open then we do not\r\n     * need to wait for the webview to resize, so we pass\r\n     * \"waitForResize: false\".\r\n     */\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n  };\n  /**\r\n   * Reset the internal state when the text field loses focus.\r\n   */\n  const focusOut = () => {\n    hasKeyboardBeenPresentedForTextField = false;\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n  /**\r\n   * When the input is about to receive\r\n   * focus, we need to move it to prevent\r\n   * mobile Safari from adjusting the viewport.\r\n   */\n  const focusIn = async () => {\n    /**\r\n     * Scroll assist should not run again\r\n     * on inputs that have been manually\r\n     * focused inside of the scroll assist\r\n     * implementation.\r\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n    win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.addEventListener('focusout', focusOut, true);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n};\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\nconst setManualFocus = el => {\n  /**\r\n   * If element is already focused then\r\n   * a new focusin event will not be dispatched\r\n   * to remove the SKIL_SCROLL_ASSIST attribute.\r\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight, platformHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\r\n     * Even though the input does not need\r\n     * scroll assist, we should preserve the\r\n     * the scroll padding as users could be moving\r\n     * focus from an input that needs scroll padding\r\n     * to an input that does not need scroll padding.\r\n     * If we remove the scroll padding now, users will\r\n     * see the page jump.\r\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\r\n   * Relocating/Focusing input causes the\r\n   * click event to be cancelled, so\r\n   * manually fire one here.\r\n   */\n  raf(() => componentEl.click());\n  /**\r\n   * If enabled, we can add scroll padding to\r\n   * the bottom of the content so that scroll assist\r\n   * has enough room to scroll the input above\r\n   * the keyboard.\r\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\r\n       * When the input is about to be blurred\r\n       * we should set a timeout to remove\r\n       * any scroll padding.\r\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => currentPadding = 0);\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\r\n       * scrollData will only consider the amount we need\r\n       * to scroll in order to properly bring the input\r\n       * into view. It will not consider the amount\r\n       * we can scroll in the content element.\r\n       * As a result, scrollData may request a greater\r\n       * scroll position than is currently available\r\n       * in the DOM. If this is the case, we need to\r\n       * wait for the webview to resize/the keyboard\r\n       * to show in order for additional scroll\r\n       * bandwidth to become available.\r\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\r\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n         * after the initial keyboard is shown. This prevents the webview from resizing\r\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        } else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\r\n         * This should only fire in 2 instances:\r\n         * 1. The app is very slow.\r\n         * 2. The app is running in a browser on an old OS\r\n         * that does not support Ionic Keyboard Events\r\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  /**\r\n   * If doc is undefined then we are in an SSR environment\r\n   * where input shims do not apply.\r\n   */\n  if (doc === undefined) {\n    return;\n  }\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\r\n   * Hide Caret and Input Blurring are needed on iOS.\r\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n   * with Chrome web browser (not Chrome webview).\r\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\r\n   * Grab the native keyboard resize configuration\r\n   * and pass it to scroll assist. Scroll assist requires\r\n   * that we adjust the input right before the input\r\n   * is about to be focused. If we called `Keyboard.getResizeMode`\r\n   * on focusin in scroll assist, we could potentially adjust the\r\n   * input too late since this call is async.\r\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async componentEl => {\n    await new Promise(resolve => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\r\n     * date/datetime-locale inputs on mobile devices show date picker\r\n     * overlays instead of keyboards. As a result, scroll assist is\r\n     * not needed. This also works around a bug in iOS <16 where\r\n     * scroll assist causes the browser to lock up. See FW-1997.\r\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput && (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = componentEl => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ev => {\n    registerInput(ev.detail);\n  });\n  doc.addEventListener('ionInputDidUnload', ev => {\n    unregisterInput(ev.detail);\n  });\n};\nexport { startInputShims };","map":{"version":3,"names":["w","win","d","doc","g","getScrollElement","c","scrollByPoint","a","findClosestIonContent","addEventListener","b","removeEventListener","r","raf","componentOnReady","KeyboardResize","K","Keyboard","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","platformHeight","_a","itemEl","calcScrollData","getBoundingClientRect","inputRect","contentRect","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","undefined","mode","None","hasKeyboardBeenPresentedForTextField","innerHeight","keyboardShow","jsSetFocus","detail","focusOut","focusIn","hasAttribute","removeAttribute","setManualFocus","el","setAttribute","focus","waitForResize","scrollData","click","window","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","INPUT_BLURRING","startInputShims","config","platform","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","getResizeMode","registerInput","Promise","resolve","inputRoot","shadowRoot","querySelector","rmFn","isDateInput","unregisterInput","fn"],"sources":["E:/Online-Voting-Portal/client/node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as win, d as doc } from './index5.js';\r\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\r\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\r\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\r\n\r\nconst cloneMap = new WeakMap();\r\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\r\n    if (cloneMap.has(componentEl) === shouldRelocate) {\r\n        return;\r\n    }\r\n    if (shouldRelocate) {\r\n        addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\r\n    }\r\n    else {\r\n        removeClone(componentEl, inputEl);\r\n    }\r\n};\r\nconst isFocused = (input) => {\r\n    /**\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\r\n     * Calling getRootNode on an element in standard web page will return HTMLDocument.\r\n     * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\r\n     * Calling getRootNode on an element that is not attached to a document/shadow tree will return\r\n     * the root of the DOM tree it belongs to.\r\n     * isFocused is used for the hide-caret utility which only considers input/textarea elements\r\n     * that are present in the DOM, so we don't set types for that final case since it does not apply.\r\n     */\r\n    return input === input.getRootNode().activeElement;\r\n};\r\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\r\n    // this allows for the actual input to receive the focus from\r\n    // the user's touch event, but before it receives focus, it\r\n    // moves the actual input to a location that will not screw\r\n    // up the app's layout, and does not allow the native browser\r\n    // to attempt to scroll the input into place (messing up headers/footers)\r\n    // the cloned input fills the area of where native input should be\r\n    // while the native input fakes out the browser by relocating itself\r\n    // before it receives the actual focus event\r\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\r\n    const parentEl = inputEl.parentNode;\r\n    // DOM WRITES\r\n    const clonedEl = inputEl.cloneNode(false);\r\n    clonedEl.classList.add('cloned-input');\r\n    clonedEl.tabIndex = -1;\r\n    /**\r\n     * Making the cloned input disabled prevents\r\n     * Chrome for Android from still scrolling\r\n     * the entire page since this cloned input\r\n     * will briefly be hidden by the keyboard\r\n     * even though it is not focused.\r\n     *\r\n     * This is not needed on iOS. While this\r\n     * does not cause functional issues on iOS,\r\n     * the input still appears slightly dimmed even\r\n     * if we set opacity: 1.\r\n     */\r\n    if (disabledClonedInput) {\r\n        clonedEl.disabled = true;\r\n    }\r\n    parentEl.appendChild(clonedEl);\r\n    cloneMap.set(componentEl, clonedEl);\r\n    const doc = componentEl.ownerDocument;\r\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\r\n    componentEl.style.pointerEvents = 'none';\r\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\r\n};\r\nconst removeClone = (componentEl, inputEl) => {\r\n    const clone = cloneMap.get(componentEl);\r\n    if (clone) {\r\n        cloneMap.delete(componentEl);\r\n        clone.remove();\r\n    }\r\n    componentEl.style.pointerEvents = '';\r\n    inputEl.style.transform = '';\r\n};\r\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\r\nconst SCROLL_AMOUNT_PADDING = 50;\r\n\r\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\r\n    if (!scrollEl || !inputEl) {\r\n        return () => {\r\n            return;\r\n        };\r\n    }\r\n    const scrollHideCaret = (shouldHideCaret) => {\r\n        if (isFocused(inputEl)) {\r\n            relocateInput(componentEl, inputEl, shouldHideCaret);\r\n        }\r\n    };\r\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\r\n    const hideCaret = () => scrollHideCaret(true);\r\n    const showCaret = () => scrollHideCaret(false);\r\n    addEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n    addEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n    inputEl.addEventListener('blur', onBlur);\r\n    return () => {\r\n        removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n        removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n        inputEl.removeEventListener('blur', onBlur);\r\n    };\r\n};\r\n\r\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\r\nconst enableInputBlurring = () => {\r\n    let focused = true;\r\n    let didScroll = false;\r\n    const doc = document;\r\n    const onScroll = () => {\r\n        didScroll = true;\r\n    };\r\n    const onFocusin = () => {\r\n        focused = true;\r\n    };\r\n    const onTouchend = (ev) => {\r\n        // if app did scroll return early\r\n        if (didScroll) {\r\n            didScroll = false;\r\n            return;\r\n        }\r\n        const active = doc.activeElement;\r\n        if (!active) {\r\n            return;\r\n        }\r\n        // only blur if the active element is a text-input or a textarea\r\n        if (active.matches(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        // if the selected target is the active element, do not blur\r\n        const tapped = ev.target;\r\n        if (tapped === active) {\r\n            return;\r\n        }\r\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        focused = false;\r\n        // TODO FW-2796: find a better way, why 50ms?\r\n        setTimeout(() => {\r\n            if (!focused) {\r\n                active.blur();\r\n            }\r\n        }, 50);\r\n    };\r\n    addEventListener(doc, 'ionScrollStart', onScroll);\r\n    doc.addEventListener('focusin', onFocusin, true);\r\n    doc.addEventListener('touchend', onTouchend, false);\r\n    return () => {\r\n        removeEventListener(doc, 'ionScrollStart', onScroll, true);\r\n        doc.removeEventListener('focusin', onFocusin, true);\r\n        doc.removeEventListener('touchend', onTouchend, false);\r\n    };\r\n};\r\n\r\nconst SCROLL_ASSIST_SPEED = 0.3;\r\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\r\n    var _a;\r\n    const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\r\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\r\n};\r\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\r\n    // compute input's Y values relative to the body\r\n    const inputTop = inputRect.top;\r\n    const inputBottom = inputRect.bottom;\r\n    // compute visible area\r\n    const visibleAreaTop = contentRect.top;\r\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\r\n    // compute safe area\r\n    const safeAreaTop = visibleAreaTop + 15;\r\n    const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\r\n    // figure out if each edge of the input is within the safe area\r\n    const distanceToBottom = safeAreaBottom - inputBottom;\r\n    const distanceToTop = safeAreaTop - inputTop;\r\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\r\n    const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\r\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\r\n    // gets focus, so make sure we don't scroll the input above the visible area\r\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\r\n    const distance = Math.abs(scrollAmount);\r\n    const duration = distance / SCROLL_ASSIST_SPEED;\r\n    const scrollDuration = Math.min(400, Math.max(150, duration));\r\n    return {\r\n        scrollAmount,\r\n        scrollDuration,\r\n        scrollPadding: keyboardHeight,\r\n        inputSafeY: -(inputTop - safeAreaTop) + 4,\r\n    };\r\n};\r\n\r\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\r\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\r\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\r\n    const timer = contentEl[PADDING_TIMER_KEY];\r\n    if (timer) {\r\n        clearTimeout(timer);\r\n    }\r\n    if (paddingAmount > 0) {\r\n        contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\r\n    }\r\n    else {\r\n        contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\r\n            contentEl.style.setProperty('--keyboard-offset', '0px');\r\n            if (clearCallback) {\r\n                clearCallback();\r\n            }\r\n        }, 120);\r\n    }\r\n};\r\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\r\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\r\n    const clearScrollPadding = () => {\r\n        if (contentEl) {\r\n            setScrollPadding(contentEl, 0, doneCallback);\r\n        }\r\n    };\r\n    inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\r\n};\r\n\r\nlet currentPadding = 0;\r\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\r\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\r\n    /**\r\n     * Scroll padding should only be added if:\r\n     * 1. The global scrollPadding config option\r\n     * is set to true.\r\n     * 2. The native keyboard resize mode is either \"none\"\r\n     * (keyboard overlays webview) or undefined (resize\r\n     * information unavailable)\r\n     * Resize info is available on Capacitor 4+\r\n     */\r\n    const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\r\n    /**\r\n     * This tracks whether or not the keyboard has been\r\n     * presented for a single focused text field. Note\r\n     * that it does not track if the keyboard is open\r\n     * in general such as if the keyboard is open for\r\n     * a different focused text field.\r\n     */\r\n    let hasKeyboardBeenPresentedForTextField = false;\r\n    /**\r\n     * When adding scroll padding we need to know\r\n     * how much of the viewport the keyboard obscures.\r\n     * We do this by subtracting the keyboard height\r\n     * from the platform height.\r\n     *\r\n     * If we compute this value when switching between\r\n     * inputs then the webview may already be resized.\r\n     * At this point, `win.innerHeight` has already accounted\r\n     * for the keyboard meaning we would then subtract\r\n     * the keyboard height again. This will result in the input\r\n     * being scrolled more than it needs to.\r\n     */\r\n    const platformHeight = win !== undefined ? win.innerHeight : 0;\r\n    /**\r\n     * Scroll assist is run when a text field\r\n     * is focused. However, it may need to\r\n     * re-run when the keyboard size changes\r\n     * such that the text field is now hidden\r\n     * underneath the keyboard.\r\n     * This function re-runs scroll assist\r\n     * when that happens.\r\n     *\r\n     * One limitation of this is on a web browser\r\n     * where native keyboard APIs do not have cross-browser\r\n     * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\r\n     * This means that if the keyboard changes but does not change\r\n     * geometry, then scroll assist will not re-run even if\r\n     * the user has scrolled the text field under the keyboard.\r\n     * This is not a problem when running in Cordova/Capacitor\r\n     * because `ionKeyboardDidShow` uses the native events\r\n     * which fire every time the keyboard changes.\r\n     */\r\n    const keyboardShow = (ev) => {\r\n        /**\r\n         * If the keyboard has not yet been presented\r\n         * for this text field then the text field has just\r\n         * received focus. In that case, the focusin listener\r\n         * will run scroll assist.\r\n         */\r\n        if (hasKeyboardBeenPresentedForTextField === false) {\r\n            hasKeyboardBeenPresentedForTextField = true;\r\n            return;\r\n        }\r\n        /**\r\n         * Otherwise, the keyboard has already been presented\r\n         * for the focused text field.\r\n         * This means that the keyboard likely changed\r\n         * geometry, and we need to re-run scroll assist.\r\n         * This can happen when the user rotates their device\r\n         * or when they switch keyboards.\r\n         *\r\n         * Make sure we pass in the computed keyboard height\r\n         * rather than the estimated keyboard height.\r\n         *\r\n         * Since the keyboard is already open then we do not\r\n         * need to wait for the webview to resize, so we pass\r\n         * \"waitForResize: false\".\r\n         */\r\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\r\n    };\r\n    /**\r\n     * Reset the internal state when the text field loses focus.\r\n     */\r\n    const focusOut = () => {\r\n        hasKeyboardBeenPresentedForTextField = false;\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.removeEventListener('focusout', focusOut, true);\r\n    };\r\n    /**\r\n     * When the input is about to receive\r\n     * focus, we need to move it to prevent\r\n     * mobile Safari from adjusting the viewport.\r\n     */\r\n    const focusIn = async () => {\r\n        /**\r\n         * Scroll assist should not run again\r\n         * on inputs that have been manually\r\n         * focused inside of the scroll assist\r\n         * implementation.\r\n         */\r\n        if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\r\n            inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\r\n            return;\r\n        }\r\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.addEventListener('focusout', focusOut, true);\r\n    };\r\n    componentEl.addEventListener('focusin', focusIn, true);\r\n    return () => {\r\n        componentEl.removeEventListener('focusin', focusIn, true);\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.removeEventListener('focusout', focusOut, true);\r\n    };\r\n};\r\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\r\nconst setManualFocus = (el) => {\r\n    /**\r\n     * If element is already focused then\r\n     * a new focusin event will not be dispatched\r\n     * to remove the SKIL_SCROLL_ASSIST attribute.\r\n     */\r\n    if (document.activeElement === el) {\r\n        return;\r\n    }\r\n    el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\r\n    el.focus();\r\n};\r\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\r\n    if (!contentEl && !footerEl) {\r\n        return;\r\n    }\r\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight, platformHeight);\r\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\r\n        // the text input is in a safe position that doesn't\r\n        // require it to be scrolled into view, just set focus now\r\n        setManualFocus(inputEl);\r\n        /**\r\n         * Even though the input does not need\r\n         * scroll assist, we should preserve the\r\n         * the scroll padding as users could be moving\r\n         * focus from an input that needs scroll padding\r\n         * to an input that does not need scroll padding.\r\n         * If we remove the scroll padding now, users will\r\n         * see the page jump.\r\n         */\r\n        if (enableScrollPadding && contentEl !== null) {\r\n            setScrollPadding(contentEl, currentPadding);\r\n            setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n        }\r\n        return;\r\n    }\r\n    // temporarily move the focus to the focus holder so the browser\r\n    // doesn't freak out while it's trying to get the input in place\r\n    // at this point the native text input still does not have focus\r\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\r\n    setManualFocus(inputEl);\r\n    /**\r\n     * Relocating/Focusing input causes the\r\n     * click event to be cancelled, so\r\n     * manually fire one here.\r\n     */\r\n    raf(() => componentEl.click());\r\n    /**\r\n     * If enabled, we can add scroll padding to\r\n     * the bottom of the content so that scroll assist\r\n     * has enough room to scroll the input above\r\n     * the keyboard.\r\n     */\r\n    if (enableScrollPadding && contentEl) {\r\n        currentPadding = scrollData.scrollPadding;\r\n        setScrollPadding(contentEl, currentPadding);\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        let scrollContentTimeout;\r\n        const scrollContent = async () => {\r\n            // clean up listeners and timeouts\r\n            if (scrollContentTimeout !== undefined) {\r\n                clearTimeout(scrollContentTimeout);\r\n            }\r\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\r\n            // scroll the input into place\r\n            if (contentEl) {\r\n                await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\r\n            }\r\n            // the scroll view is in the correct position now\r\n            // give the native text input focus\r\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\r\n            // ensure this is the focused input\r\n            setManualFocus(inputEl);\r\n            /**\r\n             * When the input is about to be blurred\r\n             * we should set a timeout to remove\r\n             * any scroll padding.\r\n             */\r\n            if (enableScrollPadding) {\r\n                setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n            }\r\n        };\r\n        const doubleKeyboardEventListener = () => {\r\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n        };\r\n        if (contentEl) {\r\n            const scrollEl = await getScrollElement(contentEl);\r\n            /**\r\n             * scrollData will only consider the amount we need\r\n             * to scroll in order to properly bring the input\r\n             * into view. It will not consider the amount\r\n             * we can scroll in the content element.\r\n             * As a result, scrollData may request a greater\r\n             * scroll position than is currently available\r\n             * in the DOM. If this is the case, we need to\r\n             * wait for the webview to resize/the keyboard\r\n             * to show in order for additional scroll\r\n             * bandwidth to become available.\r\n             */\r\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\r\n            if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\r\n                /**\r\n                 * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n                 * after the initial keyboard is shown. This prevents the webview from resizing\r\n                 * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n                 */\r\n                if (inputEl.type === 'password') {\r\n                    // Add 50px to account for the \"Passwords\" bar\r\n                    scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\r\n                    window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n                }\r\n                else {\r\n                    window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n                }\r\n                /**\r\n                 * This should only fire in 2 instances:\r\n                 * 1. The app is very slow.\r\n                 * 2. The app is running in a browser on an old OS\r\n                 * that does not support Ionic Keyboard Events\r\n                 */\r\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\r\n                return;\r\n            }\r\n        }\r\n        scrollContent();\r\n    }\r\n};\r\n\r\nconst INPUT_BLURRING = true;\r\nconst startInputShims = async (config, platform) => {\r\n    /**\r\n     * If doc is undefined then we are in an SSR environment\r\n     * where input shims do not apply.\r\n     */\r\n    if (doc === undefined) {\r\n        return;\r\n    }\r\n    const isIOS = platform === 'ios';\r\n    const isAndroid = platform === 'android';\r\n    /**\r\n     * Hide Caret and Input Blurring are needed on iOS.\r\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n     * with Chrome web browser (not Chrome webview).\r\n     */\r\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\r\n    const scrollAssist = config.getBoolean('scrollAssist', true);\r\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\r\n    const inputBlurring = config.getBoolean('inputBlurring', isIOS);\r\n    const scrollPadding = config.getBoolean('scrollPadding', true);\r\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\r\n    const hideCaretMap = new WeakMap();\r\n    const scrollAssistMap = new WeakMap();\r\n    /**\r\n     * Grab the native keyboard resize configuration\r\n     * and pass it to scroll assist. Scroll assist requires\r\n     * that we adjust the input right before the input\r\n     * is about to be focused. If we called `Keyboard.getResizeMode`\r\n     * on focusin in scroll assist, we could potentially adjust the\r\n     * input too late since this call is async.\r\n     */\r\n    const keyboardResizeMode = await Keyboard.getResizeMode();\r\n    const registerInput = async (componentEl) => {\r\n        await new Promise((resolve) => componentOnReady(componentEl, resolve));\r\n        const inputRoot = componentEl.shadowRoot || componentEl;\r\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\r\n        const scrollEl = findClosestIonContent(componentEl);\r\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\r\n        if (!inputEl) {\r\n            return;\r\n        }\r\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\r\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\r\n            hideCaretMap.set(componentEl, rmFn);\r\n        }\r\n        /**\r\n         * date/datetime-locale inputs on mobile devices show date picker\r\n         * overlays instead of keyboards. As a result, scroll assist is\r\n         * not needed. This also works around a bug in iOS <16 where\r\n         * scroll assist causes the browser to lock up. See FW-1997.\r\n         */\r\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\r\n        if (!isDateInput &&\r\n            (!!scrollEl || !!footerEl) &&\r\n            scrollAssist &&\r\n            !scrollAssistMap.has(componentEl)) {\r\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\r\n            scrollAssistMap.set(componentEl, rmFn);\r\n        }\r\n    };\r\n    const unregisterInput = (componentEl) => {\r\n        if (hideCaret) {\r\n            const fn = hideCaretMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            hideCaretMap.delete(componentEl);\r\n        }\r\n        if (scrollAssist) {\r\n            const fn = scrollAssistMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            scrollAssistMap.delete(componentEl);\r\n        }\r\n    };\r\n    if (inputBlurring && INPUT_BLURRING) {\r\n        enableInputBlurring();\r\n    }\r\n    // Input might be already loaded in the DOM before ion-device-hacks did.\r\n    // At this point we need to look for all of the inputs not registered yet\r\n    // and register them.\r\n    for (const input of inputs) {\r\n        registerInput(input);\r\n    }\r\n    doc.addEventListener('ionInputDidLoad', (ev) => {\r\n        registerInput(ev.detail);\r\n    });\r\n    doc.addEventListener('ionInputDidUnload', (ev) => {\r\n        unregisterInput(ev.detail);\r\n    });\r\n};\r\n\r\nexport { startInputShims };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}