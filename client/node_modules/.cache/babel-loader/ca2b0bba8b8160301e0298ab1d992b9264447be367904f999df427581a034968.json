{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { w as win, d as doc } from './index5.js';\nimport { K as Keyboard, a as KeyboardResize } from './keyboard.js';\n\n/**\r\n * The element that resizes when the keyboard opens\r\n * is going to depend on the resize mode\r\n * which is why we check that here.\r\n */\nconst getResizeContainer = resizeMode => {\n  /**\r\n   * If doc is undefined then we are\r\n   * in an SSR environment, so the keyboard\r\n   * adjustment does not apply.\r\n   * If the webview does not resize then there\r\n   * is no container to resize.\r\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\r\n   * The three remaining resize modes: Native, Ionic, and Body\r\n   * all cause `ion-app` to resize, so we can listen for changes\r\n   * on that. In the event `ion-app` is not available then\r\n   * we can fall back to `body`.\r\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\r\n * Get the height of ion-app or body.\r\n * This is used for determining if the webview\r\n * has resized before the keyboard closed.\r\n * */\nconst getResizeContainerHeight = resizeMode => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\r\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\r\n *\r\n * @internal\r\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\r\n */\nconst createKeyboardController = async keyboardChangeCallback => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\r\n   * This lets us determine if the webview content\r\n   * has resized as a result of the keyboard.\r\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\r\n       * We need to compute initialResizeContainerHeight right before\r\n       * the keyboard opens to guarantee the resize container is visible.\r\n       * The resize container may not be visible if we compute this\r\n       * as soon as the keyboard controller is created.\r\n       * We should only need to do this once to avoid additional clientHeight\r\n       * computations.\r\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\r\n   * Code responding to keyboard lifecycles may need\r\n   * to show/hide content once the webview has\r\n   * resized as a result of the keyboard showing/hiding.\r\n   * createResizePromiseIfNeeded provides a way for code to wait for the\r\n   * resize event that was triggered as a result of the keyboard.\r\n   */\n  const createResizePromiseIfNeeded = resizeMode => {\n    if (\n    /**\r\n     * If we are in an SSR environment then there is\r\n     * no window to resize. Additionally, if there\r\n     * is no resize mode or the resize mode is \"None\"\r\n     * then initialResizeContainerHeight will be 0\r\n     */\n    initialResizeContainerHeight === 0 ||\n    /**\r\n     * If the keyboard is closed before the webview resizes initially\r\n     * then the webview will never resize.\r\n     */\n    initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\r\n     * Get the resize container so we can\r\n     * attach the ResizeObserver below to\r\n     * the correct element.\r\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\r\n     * Some part of the web content should resize,\r\n     * and we need to listen for a resize.\r\n     */\n    return new Promise(resolve => {\n      const callback = () => {\n        /**\r\n         * As per the spec, the ResizeObserver\r\n         * will fire when observation starts if\r\n         * the observed element is rendered and does not\r\n         * have a size of 0 x 0. However, the watched element\r\n         * may or may not have resized by the time this first\r\n         * callback is fired. As a result, we need to check\r\n         * the dimensions of the element.\r\n         *\r\n         * https://www.w3.org/TR/resize-observer/#intro\r\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\r\n           * The resize happened, so stop listening\r\n           * for resize on this element.\r\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\r\n       * In Capacitor there can be delay between when the window\r\n       * resizes and when the container element resizes, so we cannot\r\n       * rely on a 'resize' event listener on the window.\r\n       * Instead, we need to determine when the container\r\n       * element resizes using a ResizeObserver.\r\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return {\n    init,\n    destroy,\n    isKeyboardVisible\n  };\n};\nexport { createKeyboardController as c };","map":{"version":3,"names":["w","win","d","doc","K","Keyboard","a","KeyboardResize","getResizeContainer","resizeMode","undefined","None","ionApp","querySelector","body","getResizeContainerHeight","containerElement","clientHeight","createKeyboardController","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","resizeOptions","getResizeMode","mode","fireChangeCallback","addEventListener","state","createResizePromiseIfNeeded","Promise","resolve","callback","ro","disconnect","ResizeObserver","observe","destroy","removeEventListener","isKeyboardVisible","c"],"sources":["E:/Online-Voting-Portal/client/node_modules/@ionic/core/components/keyboard-controller.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as win, d as doc } from './index5.js';\r\nimport { K as Keyboard, a as KeyboardResize } from './keyboard.js';\r\n\r\n/**\r\n * The element that resizes when the keyboard opens\r\n * is going to depend on the resize mode\r\n * which is why we check that here.\r\n */\r\nconst getResizeContainer = (resizeMode) => {\r\n    /**\r\n     * If doc is undefined then we are\r\n     * in an SSR environment, so the keyboard\r\n     * adjustment does not apply.\r\n     * If the webview does not resize then there\r\n     * is no container to resize.\r\n     */\r\n    if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\r\n        return null;\r\n    }\r\n    /**\r\n     * The three remaining resize modes: Native, Ionic, and Body\r\n     * all cause `ion-app` to resize, so we can listen for changes\r\n     * on that. In the event `ion-app` is not available then\r\n     * we can fall back to `body`.\r\n     */\r\n    const ionApp = doc.querySelector('ion-app');\r\n    return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\r\n};\r\n/**\r\n * Get the height of ion-app or body.\r\n * This is used for determining if the webview\r\n * has resized before the keyboard closed.\r\n * */\r\nconst getResizeContainerHeight = (resizeMode) => {\r\n    const containerElement = getResizeContainer(resizeMode);\r\n    return containerElement === null ? 0 : containerElement.clientHeight;\r\n};\r\n/**\r\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\r\n *\r\n * @internal\r\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\r\n */\r\nconst createKeyboardController = async (keyboardChangeCallback) => {\r\n    let keyboardWillShowHandler;\r\n    let keyboardWillHideHandler;\r\n    let keyboardVisible;\r\n    /**\r\n     * This lets us determine if the webview content\r\n     * has resized as a result of the keyboard.\r\n     */\r\n    let initialResizeContainerHeight;\r\n    const init = async () => {\r\n        const resizeOptions = await Keyboard.getResizeMode();\r\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\r\n        keyboardWillShowHandler = () => {\r\n            /**\r\n             * We need to compute initialResizeContainerHeight right before\r\n             * the keyboard opens to guarantee the resize container is visible.\r\n             * The resize container may not be visible if we compute this\r\n             * as soon as the keyboard controller is created.\r\n             * We should only need to do this once to avoid additional clientHeight\r\n             * computations.\r\n             */\r\n            if (initialResizeContainerHeight === undefined) {\r\n                initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\r\n            }\r\n            keyboardVisible = true;\r\n            fireChangeCallback(keyboardVisible, resizeMode);\r\n        };\r\n        keyboardWillHideHandler = () => {\r\n            keyboardVisible = false;\r\n            fireChangeCallback(keyboardVisible, resizeMode);\r\n        };\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n    };\r\n    const fireChangeCallback = (state, resizeMode) => {\r\n        if (keyboardChangeCallback) {\r\n            keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\r\n        }\r\n    };\r\n    /**\r\n     * Code responding to keyboard lifecycles may need\r\n     * to show/hide content once the webview has\r\n     * resized as a result of the keyboard showing/hiding.\r\n     * createResizePromiseIfNeeded provides a way for code to wait for the\r\n     * resize event that was triggered as a result of the keyboard.\r\n     */\r\n    const createResizePromiseIfNeeded = (resizeMode) => {\r\n        if (\r\n        /**\r\n         * If we are in an SSR environment then there is\r\n         * no window to resize. Additionally, if there\r\n         * is no resize mode or the resize mode is \"None\"\r\n         * then initialResizeContainerHeight will be 0\r\n         */\r\n        initialResizeContainerHeight === 0 ||\r\n            /**\r\n             * If the keyboard is closed before the webview resizes initially\r\n             * then the webview will never resize.\r\n             */\r\n            initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\r\n            return;\r\n        }\r\n        /**\r\n         * Get the resize container so we can\r\n         * attach the ResizeObserver below to\r\n         * the correct element.\r\n         */\r\n        const containerElement = getResizeContainer(resizeMode);\r\n        if (containerElement === null) {\r\n            return;\r\n        }\r\n        /**\r\n         * Some part of the web content should resize,\r\n         * and we need to listen for a resize.\r\n         */\r\n        return new Promise((resolve) => {\r\n            const callback = () => {\r\n                /**\r\n                 * As per the spec, the ResizeObserver\r\n                 * will fire when observation starts if\r\n                 * the observed element is rendered and does not\r\n                 * have a size of 0 x 0. However, the watched element\r\n                 * may or may not have resized by the time this first\r\n                 * callback is fired. As a result, we need to check\r\n                 * the dimensions of the element.\r\n                 *\r\n                 * https://www.w3.org/TR/resize-observer/#intro\r\n                 */\r\n                if (containerElement.clientHeight === initialResizeContainerHeight) {\r\n                    /**\r\n                     * The resize happened, so stop listening\r\n                     * for resize on this element.\r\n                     */\r\n                    ro.disconnect();\r\n                    resolve();\r\n                }\r\n            };\r\n            /**\r\n             * In Capacitor there can be delay between when the window\r\n             * resizes and when the container element resizes, so we cannot\r\n             * rely on a 'resize' event listener on the window.\r\n             * Instead, we need to determine when the container\r\n             * element resizes using a ResizeObserver.\r\n             */\r\n            const ro = new ResizeObserver(callback);\r\n            ro.observe(containerElement);\r\n        });\r\n    };\r\n    const destroy = () => {\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n        keyboardWillShowHandler = keyboardWillHideHandler = undefined;\r\n    };\r\n    const isKeyboardVisible = () => keyboardVisible;\r\n    await init();\r\n    return { init, destroy, isKeyboardVisible };\r\n};\r\n\r\nexport { createKeyboardController as c };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}