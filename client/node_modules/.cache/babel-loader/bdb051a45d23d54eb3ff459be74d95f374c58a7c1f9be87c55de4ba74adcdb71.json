{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a lock controller.\n *\n * Claiming a lock means that nothing else can acquire the lock until it is released.\n * This can momentarily prevent execution of code that needs to wait for the earlier code to finish.\n * For example, this can be used to prevent multiple transitions from occurring at the same time.\n */\nconst createLockController = () => {\n  let waitPromise;\n  /**\n   * When lock() is called, the lock is claimed.\n   * Once a lock has been claimed, it cannot be claimed again until it is released.\n   * When this function gets resolved, the lock is released, allowing it to be claimed again.\n   *\n   * @example ```tsx\n   * const unlock = await this.lockController.lock();\n   * // do other stuff\n   * unlock();\n   * ```\n   */\n  const lock = async () => {\n    const p = waitPromise;\n    let resolve;\n    waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  };\n  return {\n    lock\n  };\n};\nexport { createLockController as c };","map":{"version":3,"names":["createLockController","waitPromise","lock","p","resolve","Promise","r","undefined","c"],"sources":["D:/CIT/SEM 6/17MDCEL4 - Full Stack Web Application Development Laboratory/Online-Voting-Portal/client/node_modules/@ionic/core/components/lock-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a lock controller.\n *\n * Claiming a lock means that nothing else can acquire the lock until it is released.\n * This can momentarily prevent execution of code that needs to wait for the earlier code to finish.\n * For example, this can be used to prevent multiple transitions from occurring at the same time.\n */\nconst createLockController = () => {\n    let waitPromise;\n    /**\n     * When lock() is called, the lock is claimed.\n     * Once a lock has been claimed, it cannot be claimed again until it is released.\n     * When this function gets resolved, the lock is released, allowing it to be claimed again.\n     *\n     * @example ```tsx\n     * const unlock = await this.lockController.lock();\n     * // do other stuff\n     * unlock();\n     * ```\n     */\n    const lock = async () => {\n        const p = waitPromise;\n        let resolve;\n        waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    };\n    return {\n        lock,\n    };\n};\n\nexport { createLockController as c };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAoB,GAAGA,CAAA,KAAM;EAC/B,IAAIC,WAAW;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;IACrB,MAAMC,CAAC,GAAGF,WAAW;IACrB,IAAIG,OAAO;IACXH,WAAW,GAAG,IAAII,OAAO,CAAEC,CAAC,IAAMF,OAAO,GAAGE,CAAE,CAAC;IAC/C,IAAIH,CAAC,KAAKI,SAAS,EAAE;MACjB,MAAMJ,CAAC;IACX;IACA,OAAOC,OAAO;EAClB,CAAC;EACD,OAAO;IACHF;EACJ,CAAC;AACL,CAAC;AAED,SAASF,oBAAoB,IAAIQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}