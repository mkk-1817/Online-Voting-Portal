{"ast":null,"code":"import { getAssetPath } from '@stencil/core/internal/client';\nlet CACHED_MAP;\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nconst addIcons = icons => {\n  Object.keys(icons).forEach(name => {\n    addToIconMap(name, icons[name]);\n    /**\r\n     * Developers can also pass in the SVG object directly\r\n     * and Ionicons can map the object to a kebab case name.\r\n     * Example: addIcons({ addCircleOutline });\r\n     * This will create an \"addCircleOutline\" entry and\r\n     * an \"add-circle-outline\" entry.\r\n     * Usage: <ion-icon name=\"add-circle-outline\"></ion-icon>\r\n     * Using name=\"addCircleOutline\" is valid too, but the\r\n     * kebab case naming is preferred.\r\n     */\n    const toKebabCase = name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z0-9])/g, \"$1-$2\").toLowerCase();\n    if (name !== toKebabCase) {\n      addToIconMap(toKebabCase, icons[name]);\n    }\n  });\n};\nconst addToIconMap = (name, data) => {\n  const map = getIconMap();\n  const existingIcon = map.get(name);\n  if (existingIcon === undefined) {\n    map.set(name, data);\n    /**\r\n     * Importing and defining the same icon reference\r\n     * multiple times should not yield a warning.\r\n     */\n  } else if (existingIcon !== data) {\n    console.warn(`[Ionicons Warning]: Multiple icons were mapped to name \"${name}\". Ensure that multiple icons are not mapped to the same icon name.`);\n  }\n};\nconst getUrl = i => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url, i);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName, iconEl) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  try {\n    return getAssetPath(`svg/${iconName}.svg`);\n  } catch (e) {\n    /**\r\n     * In the custom elements build version of ionicons, referencing an icon\r\n     * by name will throw an invalid URL error because the asset path is not defined.\r\n     * This catches that error and logs something that is more developer-friendly.\r\n     * We also include a reference to the ion-icon element so developers can\r\n     * figure out which instance of ion-icon needs to be updated.\r\n     */\n    console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\n  }\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nconst getSrc = src => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nconst isSrc = str => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = val => typeof val === 'string';\nconst toLower = val => val.toLowerCase();\n/**\r\n * Elements inside of web components sometimes need to inherit global attributes\r\n * set on the host. For example, the inner input in `ion-input` should inherit\r\n * the `title` attribute that developers set directly on `ion-input`. This\r\n * helper function should be called in componentWillLoad and assigned to a variable\r\n * that is later used in the render function.\r\n *\r\n * This does not need to be reactive as changing attributes on the host element\r\n * does not trigger a re-render.\r\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n/**\r\n * Returns `true` if the document or host element\r\n * has a `dir` set to `rtl`. The host value will always\r\n * take priority over the root document value.\r\n */\nconst isRTL = hostEl => {\n  if (hostEl) {\n    if (hostEl.dir !== '') {\n      return hostEl.dir.toLowerCase() === 'rtl';\n    }\n  }\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\nexport { addIcons as a, inheritAttributes as b, getName as c, isRTL as d, getUrl as g, isStr as i };","map":{"version":3,"names":["getAssetPath","CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","addIcons","icons","Object","keys","forEach","name","addToIconMap","toKebabCase","replace","toLowerCase","data","existingIcon","get","undefined","set","console","warn","getUrl","i","url","getSrc","src","getName","icon","mode","ios","md","getNamedUrl","iconName","iconEl","e","toLower","isSrc","isStr","trim","invalidChars","str","length","test","val","inheritAttributes","el","attributes","attributeObject","attr","hasAttribute","value","getAttribute","removeAttribute","isRTL","hostEl","dir","document","a","b","c","d","g"],"sources":["E:/Online-Voting-Portal/client/node_modules/ionicons/components/utils.js"],"sourcesContent":["import { getAssetPath } from '@stencil/core/internal/client';\r\n\r\nlet CACHED_MAP;\r\nconst getIconMap = () => {\r\n  if (typeof window === 'undefined') {\r\n    return new Map();\r\n  }\r\n  else {\r\n    if (!CACHED_MAP) {\r\n      const win = window;\r\n      win.Ionicons = win.Ionicons || {};\r\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\r\n    }\r\n    return CACHED_MAP;\r\n  }\r\n};\r\nconst addIcons = (icons) => {\r\n  Object.keys(icons).forEach(name => {\r\n    addToIconMap(name, icons[name]);\r\n    /**\r\n     * Developers can also pass in the SVG object directly\r\n     * and Ionicons can map the object to a kebab case name.\r\n     * Example: addIcons({ addCircleOutline });\r\n     * This will create an \"addCircleOutline\" entry and\r\n     * an \"add-circle-outline\" entry.\r\n     * Usage: <ion-icon name=\"add-circle-outline\"></ion-icon>\r\n     * Using name=\"addCircleOutline\" is valid too, but the\r\n     * kebab case naming is preferred.\r\n     */\r\n    const toKebabCase = name.replace(/([a-z0-9]|(?=[A-Z]))([A-Z0-9])/g, \"$1-$2\").toLowerCase();\r\n    if (name !== toKebabCase) {\r\n      addToIconMap(toKebabCase, icons[name]);\r\n    }\r\n  });\r\n};\r\nconst addToIconMap = (name, data) => {\r\n  const map = getIconMap();\r\n  const existingIcon = map.get(name);\r\n  if (existingIcon === undefined) {\r\n    map.set(name, data);\r\n    /**\r\n     * Importing and defining the same icon reference\r\n     * multiple times should not yield a warning.\r\n     */\r\n  }\r\n  else if (existingIcon !== data) {\r\n    console.warn(`[Ionicons Warning]: Multiple icons were mapped to name \"${name}\". Ensure that multiple icons are not mapped to the same icon name.`);\r\n  }\r\n};\r\nconst getUrl = (i) => {\r\n  let url = getSrc(i.src);\r\n  if (url) {\r\n    return url;\r\n  }\r\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\r\n  if (url) {\r\n    return getNamedUrl(url, i);\r\n  }\r\n  if (i.icon) {\r\n    url = getSrc(i.icon);\r\n    if (url) {\r\n      return url;\r\n    }\r\n    url = getSrc(i.icon[i.mode]);\r\n    if (url) {\r\n      return url;\r\n    }\r\n  }\r\n  return null;\r\n};\r\nconst getNamedUrl = (iconName, iconEl) => {\r\n  const url = getIconMap().get(iconName);\r\n  if (url) {\r\n    return url;\r\n  }\r\n  try {\r\n    return getAssetPath(`svg/${iconName}.svg`);\r\n  }\r\n  catch (e) {\r\n    /**\r\n     * In the custom elements build version of ionicons, referencing an icon\r\n     * by name will throw an invalid URL error because the asset path is not defined.\r\n     * This catches that error and logs something that is more developer-friendly.\r\n     * We also include a reference to the ion-icon element so developers can\r\n     * figure out which instance of ion-icon needs to be updated.\r\n     */\r\n    console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\r\n  }\r\n};\r\nconst getName = (iconName, icon, mode, ios, md) => {\r\n  // default to \"md\" if somehow the mode wasn't set\r\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\r\n  // if an icon was passed in using the ios or md attributes\r\n  // set the iconName to whatever was passed in\r\n  if (ios && mode === 'ios') {\r\n    iconName = toLower(ios);\r\n  }\r\n  else if (md && mode === 'md') {\r\n    iconName = toLower(md);\r\n  }\r\n  else {\r\n    if (!iconName && icon && !isSrc(icon)) {\r\n      iconName = icon;\r\n    }\r\n    if (isStr(iconName)) {\r\n      iconName = toLower(iconName);\r\n    }\r\n  }\r\n  if (!isStr(iconName) || iconName.trim() === '') {\r\n    return null;\r\n  }\r\n  // only allow alpha characters and dash\r\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\r\n  if (invalidChars !== '') {\r\n    return null;\r\n  }\r\n  return iconName;\r\n};\r\nconst getSrc = (src) => {\r\n  if (isStr(src)) {\r\n    src = src.trim();\r\n    if (isSrc(src)) {\r\n      return src;\r\n    }\r\n  }\r\n  return null;\r\n};\r\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\r\nconst isStr = (val) => typeof val === 'string';\r\nconst toLower = (val) => val.toLowerCase();\r\n/**\r\n * Elements inside of web components sometimes need to inherit global attributes\r\n * set on the host. For example, the inner input in `ion-input` should inherit\r\n * the `title` attribute that developers set directly on `ion-input`. This\r\n * helper function should be called in componentWillLoad and assigned to a variable\r\n * that is later used in the render function.\r\n *\r\n * This does not need to be reactive as changing attributes on the host element\r\n * does not trigger a re-render.\r\n */\r\nconst inheritAttributes = (el, attributes = []) => {\r\n  const attributeObject = {};\r\n  attributes.forEach(attr => {\r\n    if (el.hasAttribute(attr)) {\r\n      const value = el.getAttribute(attr);\r\n      if (value !== null) {\r\n        attributeObject[attr] = el.getAttribute(attr);\r\n      }\r\n      el.removeAttribute(attr);\r\n    }\r\n  });\r\n  return attributeObject;\r\n};\r\n/**\r\n * Returns `true` if the document or host element\r\n * has a `dir` set to `rtl`. The host value will always\r\n * take priority over the root document value.\r\n */\r\nconst isRTL = (hostEl) => {\r\n  if (hostEl) {\r\n    if (hostEl.dir !== '') {\r\n      return hostEl.dir.toLowerCase() === 'rtl';\r\n    }\r\n  }\r\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\r\n};\r\n\r\nexport { addIcons as a, inheritAttributes as b, getName as c, isRTL as d, getUrl as g, isStr as i };\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,+BAA+B;AAE5D,IAAIC,UAAU;AACd,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,IAAIC,GAAG,CAAC,CAAC;EAClB,CAAC,MACI;IACH,IAAI,CAACH,UAAU,EAAE;MACf,MAAMI,GAAG,GAAGF,MAAM;MAClBE,GAAG,CAACC,QAAQ,GAAGD,GAAG,CAACC,QAAQ,IAAI,CAAC,CAAC;MACjCL,UAAU,GAAGI,GAAG,CAACC,QAAQ,CAACC,GAAG,GAAGF,GAAG,CAACC,QAAQ,CAACC,GAAG,IAAI,IAAIH,GAAG,CAAC,CAAC;IAC/D;IACA,OAAOH,UAAU;EACnB;AACF,CAAC;AACD,MAAMO,QAAQ,GAAIC,KAAK,IAAK;EAC1BC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,OAAO,CAACC,IAAI,IAAI;IACjCC,YAAY,CAACD,IAAI,EAAEJ,KAAK,CAACI,IAAI,CAAC,CAAC;IAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAME,WAAW,GAAGF,IAAI,CAACG,OAAO,CAAC,iCAAiC,EAAE,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;IAC1F,IAAIJ,IAAI,KAAKE,WAAW,EAAE;MACxBD,YAAY,CAACC,WAAW,EAAEN,KAAK,CAACI,IAAI,CAAC,CAAC;IACxC;EACF,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,YAAY,GAAGA,CAACD,IAAI,EAAEK,IAAI,KAAK;EACnC,MAAMX,GAAG,GAAGL,UAAU,CAAC,CAAC;EACxB,MAAMiB,YAAY,GAAGZ,GAAG,CAACa,GAAG,CAACP,IAAI,CAAC;EAClC,IAAIM,YAAY,KAAKE,SAAS,EAAE;IAC9Bd,GAAG,CAACe,GAAG,CAACT,IAAI,EAAEK,IAAI,CAAC;IACnB;AACJ;AACA;AACA;EACE,CAAC,MACI,IAAIC,YAAY,KAAKD,IAAI,EAAE;IAC9BK,OAAO,CAACC,IAAI,CAAE,2DAA0DX,IAAK,qEAAoE,CAAC;EACpJ;AACF,CAAC;AACD,MAAMY,MAAM,GAAIC,CAAC,IAAK;EACpB,IAAIC,GAAG,GAAGC,MAAM,CAACF,CAAC,CAACG,GAAG,CAAC;EACvB,IAAIF,GAAG,EAAE;IACP,OAAOA,GAAG;EACZ;EACAA,GAAG,GAAGG,OAAO,CAACJ,CAAC,CAACb,IAAI,EAAEa,CAAC,CAACK,IAAI,EAAEL,CAAC,CAACM,IAAI,EAAEN,CAAC,CAACO,GAAG,EAAEP,CAAC,CAACQ,EAAE,CAAC;EAClD,IAAIP,GAAG,EAAE;IACP,OAAOQ,WAAW,CAACR,GAAG,EAAED,CAAC,CAAC;EAC5B;EACA,IAAIA,CAAC,CAACK,IAAI,EAAE;IACVJ,GAAG,GAAGC,MAAM,CAACF,CAAC,CAACK,IAAI,CAAC;IACpB,IAAIJ,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACAA,GAAG,GAAGC,MAAM,CAACF,CAAC,CAACK,IAAI,CAACL,CAAC,CAACM,IAAI,CAAC,CAAC;IAC5B,IAAIL,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAMQ,WAAW,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;EACxC,MAAMV,GAAG,GAAGzB,UAAU,CAAC,CAAC,CAACkB,GAAG,CAACgB,QAAQ,CAAC;EACtC,IAAIT,GAAG,EAAE;IACP,OAAOA,GAAG;EACZ;EACA,IAAI;IACF,OAAO3B,YAAY,CAAE,OAAMoC,QAAS,MAAK,CAAC;EAC5C,CAAC,CACD,OAAOE,CAAC,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;IACIf,OAAO,CAACC,IAAI,CAAE,sDAAqDY,QAAS,0HAAyH,EAAEC,MAAM,CAAC;EAChN;AACF,CAAC;AACD,MAAMP,OAAO,GAAGA,CAACM,QAAQ,EAAEL,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,EAAE,KAAK;EACjD;EACAF,IAAI,GAAG,CAACA,IAAI,IAAIO,OAAO,CAACP,IAAI,CAAC,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI;EACvD;EACA;EACA,IAAIC,GAAG,IAAID,IAAI,KAAK,KAAK,EAAE;IACzBI,QAAQ,GAAGG,OAAO,CAACN,GAAG,CAAC;EACzB,CAAC,MACI,IAAIC,EAAE,IAAIF,IAAI,KAAK,IAAI,EAAE;IAC5BI,QAAQ,GAAGG,OAAO,CAACL,EAAE,CAAC;EACxB,CAAC,MACI;IACH,IAAI,CAACE,QAAQ,IAAIL,IAAI,IAAI,CAACS,KAAK,CAACT,IAAI,CAAC,EAAE;MACrCK,QAAQ,GAAGL,IAAI;IACjB;IACA,IAAIU,KAAK,CAACL,QAAQ,CAAC,EAAE;MACnBA,QAAQ,GAAGG,OAAO,CAACH,QAAQ,CAAC;IAC9B;EACF;EACA,IAAI,CAACK,KAAK,CAACL,QAAQ,CAAC,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC9C,OAAO,IAAI;EACb;EACA;EACA,MAAMC,YAAY,GAAGP,QAAQ,CAACpB,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACzD,IAAI2B,YAAY,KAAK,EAAE,EAAE;IACvB,OAAO,IAAI;EACb;EACA,OAAOP,QAAQ;AACjB,CAAC;AACD,MAAMR,MAAM,GAAIC,GAAG,IAAK;EACtB,IAAIY,KAAK,CAACZ,GAAG,CAAC,EAAE;IACdA,GAAG,GAAGA,GAAG,CAACa,IAAI,CAAC,CAAC;IAChB,IAAIF,KAAK,CAACX,GAAG,CAAC,EAAE;MACd,OAAOA,GAAG;IACZ;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAMW,KAAK,GAAII,GAAG,IAAKA,GAAG,CAACC,MAAM,GAAG,CAAC,IAAI,SAAS,CAACC,IAAI,CAACF,GAAG,CAAC;AAC5D,MAAMH,KAAK,GAAIM,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ;AAC9C,MAAMR,OAAO,GAAIQ,GAAG,IAAKA,GAAG,CAAC9B,WAAW,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+B,iBAAiB,GAAGA,CAACC,EAAE,EAAEC,UAAU,GAAG,EAAE,KAAK;EACjD,MAAMC,eAAe,GAAG,CAAC,CAAC;EAC1BD,UAAU,CAACtC,OAAO,CAACwC,IAAI,IAAI;IACzB,IAAIH,EAAE,CAACI,YAAY,CAACD,IAAI,CAAC,EAAE;MACzB,MAAME,KAAK,GAAGL,EAAE,CAACM,YAAY,CAACH,IAAI,CAAC;MACnC,IAAIE,KAAK,KAAK,IAAI,EAAE;QAClBH,eAAe,CAACC,IAAI,CAAC,GAAGH,EAAE,CAACM,YAAY,CAACH,IAAI,CAAC;MAC/C;MACAH,EAAE,CAACO,eAAe,CAACJ,IAAI,CAAC;IAC1B;EACF,CAAC,CAAC;EACF,OAAOD,eAAe;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMM,KAAK,GAAIC,MAAM,IAAK;EACxB,IAAIA,MAAM,EAAE;IACV,IAAIA,MAAM,CAACC,GAAG,KAAK,EAAE,EAAE;MACrB,OAAOD,MAAM,CAACC,GAAG,CAAC1C,WAAW,CAAC,CAAC,KAAK,KAAK;IAC3C;EACF;EACA,OAAO,CAAC2C,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACD,GAAG,CAAC1C,WAAW,CAAC,CAAC,MAAM,KAAK;AACnG,CAAC;AAED,SAAST,QAAQ,IAAIqD,CAAC,EAAEb,iBAAiB,IAAIc,CAAC,EAAEhC,OAAO,IAAIiC,CAAC,EAAEN,KAAK,IAAIO,CAAC,EAAEvC,MAAM,IAAIwC,CAAC,EAAExB,KAAK,IAAIf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}