{"ast":null,"code":"/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { p as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { p as printIonWarning } from './index6.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index2.js';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { a as attachComponent } from './framework-delegate.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\r\n   * DOM WRITE\r\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;z-index:0}\";\nconst IonNavStyle0 = navCss;\nconst Nav = /*@__PURE__*/proxyCustomElement(class Nav extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.gestureOrAnimationInProgress = false;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    this.didLoad = false;\n    this.delegate = undefined;\n    this.swipeGesture = undefined;\n    this.animated = true;\n    this.animation = undefined;\n    this.rootParams = undefined;\n    this.root = undefined;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root === undefined) {\n      return;\n    }\n    if (this.didLoad === false) {\n      /**\r\n       * If the component has not loaded yet, we can skip setting up the root component.\r\n       * It will be called when `componentDidLoad` fires.\r\n       */\n      return;\n    }\n    if (!this.useRouter) {\n      if (this.root !== undefined) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    } else if (isDev) {\n      printIonWarning('<ion-nav> does not support a root attribute when using ion-router.', this.el);\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    // We want to set this flag before any watch callbacks are manually called\n    this.didLoad = true;\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\r\n   * Push a new component onto the current navigation stack. Pass any additional\r\n   * information along as an object. This additional information is accessible\r\n   * through NavParams.\r\n   *\r\n   * @param component The component to push onto the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\r\n   * Inserts a component into the navigation stack at the specified index.\r\n   * This is useful to add a component at any point in the navigation stack.\r\n   *\r\n   * @param insertIndex The index to insert the component at in the stack.\r\n   * @param component The component to insert into the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\r\n   * Inserts an array of components into the navigation stack at the specified index.\r\n   * The last component in the array will become instantiated as a view, and animate\r\n   * in to become the active view.\r\n   *\r\n   * @param insertIndex The index to insert the components at in the stack.\r\n   * @param insertComponents The components to insert into the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\r\n   * Pop a component off of the navigation stack. Navigates back from the current\r\n   * component.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\r\n   * Pop to a specific index in the navigation stack.\r\n   *\r\n   * @param indexOrViewCtrl The index or view controller to pop to.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\r\n   * Navigate back to the root of the stack, no matter how far back that is.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\r\n   * Removes a component from the navigation stack at the specified index.\r\n   *\r\n   * @param startIndex The number to begin removal at.\r\n   * @param removeCount The number of components to remove.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\r\n   * Set the root for the current navigation stack to a component.\r\n   *\r\n   * @param component The component to set as the root of the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\r\n   * Set the views of the current navigation stack and navigate to the last view.\r\n   * By default animations are disabled, but they can be enabled by passing options\r\n   * to the navigation controller. Navigation parameters can also be passed to the\r\n   * individual pages in the array.\r\n   *\r\n   * @param views The list of views to set as the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : opts = {};\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\r\n   * Called by the router to update the view.\r\n   *\r\n   * @param id The component tag.\r\n   * @param params The component params.\r\n   * @param direction A direction hint.\r\n   * @param animation an AnimationBuilder.\r\n   *\r\n   * @return the status.\r\n   * @internal\r\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n    return promise;\n  }\n  /**\r\n   * Called by <ion-router> to retrieve the current component.\r\n   *\r\n   * @internal\r\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      };\n    }\n    return undefined;\n  }\n  /**\r\n   * Get the active view.\r\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\r\n   * Get the view at the specified index.\r\n   *\r\n   * @param index The index of the view.\r\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\r\n   * Returns `true` if the current view can go back.\r\n   *\r\n   * @param view The view to check.\r\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\r\n   * Get the previous view.\r\n   *\r\n   * @param view The view to get.\r\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\r\n   * Adds a navigation stack change to the queue and schedules it to run.\r\n   *\r\n   * @returns Whether the transition succeeds.\r\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\r\n     * If using router, check to see if navigation hooks\r\n     * will allow us to perform this transition. This\r\n     * is required in order for hooks to work with\r\n     * the ion-back-button or swipe to go back.\r\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  /**\r\n   * Consumes the next transition in the queue.\r\n   *\r\n   * @returns whether the transition is executed.\r\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\r\n         * If heading back, use the entering page's animation\r\n         * unless otherwise specified by the developer.\r\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      } else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    } catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\r\n   * Returns the view that will be entered considering the transition instructions.\r\n   *\r\n   * @param ti The instructions.\r\n   * @param leavingView The view being left or undefined if none.\r\n   *\r\n   * @returns The view that will be entered, undefined if none.\r\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\r\n   * Adds and Removes the views from the navigation stack.\r\n   *\r\n   * @param enteringView The view being entered.\r\n   * @param leavingView The view being left.\r\n   * @param ti The instructions.\r\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const {\n      insertViews,\n      removeStart,\n      removeCount\n    } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? ani => {\n      /**\r\n       * Because this progress callback is called asynchronously\r\n       * it is possible for the gesture to start and end before\r\n       * the animation is ever set. In that scenario, we should\r\n       * immediately call progressEnd so that the transition promise\r\n       * resolves and the gesture does not get locked up.\r\n       */\n      if (ani !== undefined && !this.gestureOrAnimationInProgress) {\n        this.gestureOrAnimationInProgress = true;\n        ani.onFinish(() => {\n          this.gestureOrAnimationInProgress = false;\n        }, {\n          oneTimeCallback: true\n        });\n        /**\r\n         * Playing animation to beginning\r\n         * with a duration of 0 prevents\r\n         * any flickering when the animation\r\n         * is later cleaned up.\r\n         */\n        ani.progressEnd(0, 0, 0);\n      } else {\n        this.sbAni = ani;\n      }\n    } : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({\n      mode,\n      showGoBack: this.canGoBackSync(enteringView),\n      baseEl: this.el,\n      progressCallback,\n      animated: this.animated && config.getBoolean('animated', true),\n      enteringEl,\n      leavingEl\n    }, opts), {\n      animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n    });\n    const {\n      hasCompleted\n    } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\r\n     * If the transition did not complete, the leavingView will still be the active\r\n     * view on the stack. Otherwise unmount all the views after the enteringView.\r\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  /**\r\n   * Inserts a view at the specified index.\r\n   *\r\n   * When the view already is in the stack it will be moved to the new position.\r\n   *\r\n   * @param view The view to insert.\r\n   * @param index The index where to insert the view.\r\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    } else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\r\n   * Removes a view from the stack.\r\n   *\r\n   * @param view The view to remove.\r\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\r\n   * Unmounts all inactive views after the specified active view.\r\n   *\r\n   * DOM WRITE\r\n   *\r\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\r\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\r\n       * When inserting multiple views via insertPages\r\n       * the last page will be transitioned to, but the\r\n       * others will not be. As a result, a DOM element\r\n       * will only be created for the last page inserted.\r\n       * As a result, it is possible to have views in the\r\n       * stack that do not have `view.element` yet.\r\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return !this.gestureOrAnimationInProgress && !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.canGoBackSync();\n  }\n  onStart() {\n    this.gestureOrAnimationInProgress = true;\n    this.pop({\n      direction: 'back',\n      progressAnimation: true\n    });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.sbAni.onFinish(() => {\n        this.gestureOrAnimationInProgress = false;\n      }, {\n        oneTimeCallback: true\n      });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\r\n       * Animation will be reversed here, so need to\r\n       * reverse the easing curve as well\r\n       *\r\n       * Additionally, we need to account for the time relative\r\n       * to the new easing curve, as `stepValue` is going to be given\r\n       * in terms of a linear curve.\r\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    } else {\n      this.gestureOrAnimationInProgress = false;\n    }\n  }\n  render() {\n    return h(\"slot\", {\n      key: '8254ea10bef0575c13f8b0ddbe4643bec19f2366'\n    });\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n  static get style() {\n    return IonNavStyle0;\n  }\n}, [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}, undefined, {\n  \"swipeGesture\": [\"swipeGestureChanged\"],\n  \"root\": [\"rootChanged\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n        break;\n    }\n  });\n}\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","h","Build","g","getTimeGivenProgression","p","assert","s","shallowEqualStringMap","printIonWarning","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","b","LIFECYCLE_WILL_LEAVE","c","LIFECYCLE_DID_LEAVE","getIonMode","config","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","IonNavStyle0","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","gestureOrAnimationInProgress","useRouter","isTransitioning","destroyed","views","didLoad","swipeGesture","animated","animation","rootParams","root","swipeGestureChanged","gesture","enable","rootChanged","isDev","setRoot","el","componentWillLoad","document","querySelector","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","destroy","length","push","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","markVisible","viewController","find","Object","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","onFinish","oneTimeCallback","progressEnd","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","stepValue","progressStep","shouldComplete","dur","newStepValue","easing","render","key","watchers","style","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"sources":["E:/Online-Voting-Portal/client/node_modules/@ionic/core/components/ion-nav.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\r\nimport { p as assert, s as shallowEqualStringMap } from './helpers.js';\r\nimport { p as printIonWarning } from './index6.js';\r\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index2.js';\r\nimport { b as getIonMode, c as config } from './ionic-global.js';\r\nimport { a as attachComponent } from './framework-delegate.js';\r\n\r\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\n// TODO(FW-2832): types\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nconst matches = (view, id, params) => {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    return shallowEqualStringMap(view.params, params);\r\n};\r\nconst convertToView = (page, params) => {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n    return pages\r\n        .map((page) => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('component' in page) {\r\n            return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\r\n        }\r\n        return convertToView(page, undefined);\r\n    })\r\n        .filter((v) => v !== null);\r\n};\r\n\r\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;z-index:0}\";\r\nconst IonNavStyle0 = navCss;\r\n\r\nconst Nav = /*@__PURE__*/ proxyCustomElement(class Nav extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.__registerHost();\r\n        this.__attachShadow();\r\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\r\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\r\n        this.transInstr = [];\r\n        this.gestureOrAnimationInProgress = false;\r\n        this.useRouter = false;\r\n        this.isTransitioning = false;\r\n        this.destroyed = false;\r\n        this.views = [];\r\n        this.didLoad = false;\r\n        this.delegate = undefined;\r\n        this.swipeGesture = undefined;\r\n        this.animated = true;\r\n        this.animation = undefined;\r\n        this.rootParams = undefined;\r\n        this.root = undefined;\r\n    }\r\n    swipeGestureChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.enable(this.swipeGesture === true);\r\n        }\r\n    }\r\n    rootChanged() {\r\n        const isDev = Build.isDev;\r\n        if (this.root === undefined) {\r\n            return;\r\n        }\r\n        if (this.didLoad === false) {\r\n            /**\r\n             * If the component has not loaded yet, we can skip setting up the root component.\r\n             * It will be called when `componentDidLoad` fires.\r\n             */\r\n            return;\r\n        }\r\n        if (!this.useRouter) {\r\n            if (this.root !== undefined) {\r\n                this.setRoot(this.root, this.rootParams);\r\n            }\r\n        }\r\n        else if (isDev) {\r\n            printIonWarning('<ion-nav> does not support a root attribute when using ion-router.', this.el);\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\r\n        if (this.swipeGesture === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\r\n        }\r\n        this.ionNavWillLoad.emit();\r\n    }\r\n    async componentDidLoad() {\r\n        // We want to set this flag before any watch callbacks are manually called\r\n        this.didLoad = true;\r\n        this.rootChanged();\r\n        this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n        this.swipeGestureChanged();\r\n    }\r\n    connectedCallback() {\r\n        this.destroyed = false;\r\n    }\r\n    disconnectedCallback() {\r\n        for (const view of this.views) {\r\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            view._destroy();\r\n        }\r\n        // Release swipe back gesture and transition.\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n        this.transInstr.length = 0;\r\n        this.views.length = 0;\r\n        this.destroyed = true;\r\n    }\r\n    /**\r\n     * Push a new component onto the current navigation stack. Pass any additional\r\n     * information along as an object. This additional information is accessible\r\n     * through NavParams.\r\n     *\r\n     * @param component The component to push onto the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    push(component, componentProps, opts, done) {\r\n        return this.insert(-1, component, componentProps, opts, done);\r\n    }\r\n    /**\r\n     * Inserts a component into the navigation stack at the specified index.\r\n     * This is useful to add a component at any point in the navigation stack.\r\n     *\r\n     * @param insertIndex The index to insert the component at in the stack.\r\n     * @param component The component to insert into the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    insert(insertIndex, component, componentProps, opts, done) {\r\n        return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\r\n    }\r\n    /**\r\n     * Inserts an array of components into the navigation stack at the specified index.\r\n     * The last component in the array will become instantiated as a view, and animate\r\n     * in to become the active view.\r\n     *\r\n     * @param insertIndex The index to insert the components at in the stack.\r\n     * @param insertComponents The components to insert into the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    insertPages(insertIndex, insertComponents, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: insertComponents,\r\n            opts,\r\n        }, done);\r\n    }\r\n    /**\r\n     * Pop a component off of the navigation stack. Navigates back from the current\r\n     * component.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    pop(opts, done) {\r\n        return this.removeIndex(-1, 1, opts, done);\r\n    }\r\n    /**\r\n     * Pop to a specific index in the navigation stack.\r\n     *\r\n     * @param indexOrViewCtrl The index or view controller to pop to.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    popTo(indexOrViewCtrl, opts, done) {\r\n        const ti = {\r\n            removeStart: -1,\r\n            removeCount: -1,\r\n            opts,\r\n        };\r\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n            ti.removeView = indexOrViewCtrl;\r\n            ti.removeStart = 1;\r\n        }\r\n        else if (typeof indexOrViewCtrl === 'number') {\r\n            ti.removeStart = indexOrViewCtrl + 1;\r\n        }\r\n        return this.queueTrns(ti, done);\r\n    }\r\n    /**\r\n     * Navigate back to the root of the stack, no matter how far back that is.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    popToRoot(opts, done) {\r\n        return this.removeIndex(1, -1, opts, done);\r\n    }\r\n    /**\r\n     * Removes a component from the navigation stack at the specified index.\r\n     *\r\n     * @param startIndex The number to begin removal at.\r\n     * @param removeCount The number of components to remove.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    removeIndex(startIndex, removeCount = 1, opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: startIndex,\r\n            removeCount,\r\n            opts,\r\n        }, done);\r\n    }\r\n    /**\r\n     * Set the root for the current navigation stack to a component.\r\n     *\r\n     * @param component The component to set as the root of the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    setRoot(component, componentProps, opts, done) {\r\n        return this.setPages([{ component, componentProps }], opts, done);\r\n    }\r\n    /**\r\n     * Set the views of the current navigation stack and navigate to the last view.\r\n     * By default animations are disabled, but they can be enabled by passing options\r\n     * to the navigation controller. Navigation parameters can also be passed to the\r\n     * individual pages in the array.\r\n     *\r\n     * @param views The list of views to set as the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    setPages(views, opts, done) {\r\n        opts !== null && opts !== void 0 ? opts : (opts = {});\r\n        // if animation wasn't set to true then default it to NOT animate\r\n        if (opts.animated !== true) {\r\n            opts.animated = false;\r\n        }\r\n        return this.queueTrns({\r\n            insertStart: 0,\r\n            insertViews: views,\r\n            removeStart: 0,\r\n            removeCount: -1,\r\n            opts,\r\n        }, done);\r\n    }\r\n    /**\r\n     * Called by the router to update the view.\r\n     *\r\n     * @param id The component tag.\r\n     * @param params The component params.\r\n     * @param direction A direction hint.\r\n     * @param animation an AnimationBuilder.\r\n     *\r\n     * @return the status.\r\n     * @internal\r\n     */\r\n    setRouteId(id, params, direction, animation) {\r\n        const active = this.getActiveSync();\r\n        if (matches(active, id, params)) {\r\n            return Promise.resolve({\r\n                changed: false,\r\n                element: active.element,\r\n            });\r\n        }\r\n        let resolve;\r\n        const promise = new Promise((r) => (resolve = r));\r\n        let finish;\r\n        const commonOpts = {\r\n            updateURL: false,\r\n            viewIsReady: (enteringEl) => {\r\n                let mark;\r\n                const p = new Promise((r) => (mark = r));\r\n                resolve({\r\n                    changed: true,\r\n                    element: enteringEl,\r\n                    markVisible: async () => {\r\n                        mark();\r\n                        await finish;\r\n                    },\r\n                });\r\n                return p;\r\n            },\r\n        };\r\n        if (direction === 'root') {\r\n            finish = this.setRoot(id, params, commonOpts);\r\n        }\r\n        else {\r\n            // Look for a view matching the target in the view stack.\r\n            const viewController = this.views.find((v) => matches(v, id, params));\r\n            if (viewController) {\r\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\r\n            }\r\n            else if (direction === 'forward') {\r\n                finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\r\n            }\r\n            else if (direction === 'back') {\r\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\r\n            }\r\n        }\r\n        return promise;\r\n    }\r\n    /**\r\n     * Called by <ion-router> to retrieve the current component.\r\n     *\r\n     * @internal\r\n     */\r\n    async getRouteId() {\r\n        const active = this.getActiveSync();\r\n        if (active) {\r\n            return {\r\n                id: active.element.tagName,\r\n                params: active.params,\r\n                element: active.element,\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Get the active view.\r\n     */\r\n    async getActive() {\r\n        return this.getActiveSync();\r\n    }\r\n    /**\r\n     * Get the view at the specified index.\r\n     *\r\n     * @param index The index of the view.\r\n     */\r\n    async getByIndex(index) {\r\n        return this.views[index];\r\n    }\r\n    /**\r\n     * Returns `true` if the current view can go back.\r\n     *\r\n     * @param view The view to check.\r\n     */\r\n    async canGoBack(view) {\r\n        return this.canGoBackSync(view);\r\n    }\r\n    /**\r\n     * Get the previous view.\r\n     *\r\n     * @param view The view to get.\r\n     */\r\n    async getPrevious(view) {\r\n        return this.getPreviousSync(view);\r\n    }\r\n    getLength() {\r\n        return this.views.length;\r\n    }\r\n    getActiveSync() {\r\n        return this.views[this.views.length - 1];\r\n    }\r\n    canGoBackSync(view = this.getActiveSync()) {\r\n        return !!(view && this.getPreviousSync(view));\r\n    }\r\n    getPreviousSync(view = this.getActiveSync()) {\r\n        if (!view) {\r\n            return undefined;\r\n        }\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        return index > 0 ? views[index - 1] : undefined;\r\n    }\r\n    /**\r\n     * Adds a navigation stack change to the queue and schedules it to run.\r\n     *\r\n     * @returns Whether the transition succeeds.\r\n     */\r\n    async queueTrns(ti, done) {\r\n        var _a, _b;\r\n        if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\r\n            return false;\r\n        }\r\n        const promise = new Promise((resolve, reject) => {\r\n            ti.resolve = resolve;\r\n            ti.reject = reject;\r\n        });\r\n        ti.done = done;\r\n        /**\r\n         * If using router, check to see if navigation hooks\r\n         * will allow us to perform this transition. This\r\n         * is required in order for hooks to work with\r\n         * the ion-back-button or swipe to go back.\r\n         */\r\n        if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\r\n            const router = document.querySelector('ion-router');\r\n            if (router) {\r\n                const canTransition = await router.canTransition();\r\n                if (canTransition === false) {\r\n                    return false;\r\n                }\r\n                if (typeof canTransition === 'string') {\r\n                    router.push(canTransition, ti.opts.direction || 'back');\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        // Normalize empty\r\n        if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\r\n            ti.insertViews = undefined;\r\n        }\r\n        // Enqueue transition instruction\r\n        this.transInstr.push(ti);\r\n        // if there isn't a transition already happening\r\n        // then this will kick off this transition\r\n        this.nextTrns();\r\n        return promise;\r\n    }\r\n    success(result, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        if (ti.done) {\r\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n        }\r\n        ti.resolve(result.hasCompleted);\r\n        if (ti.opts.updateURL !== false && this.useRouter) {\r\n            const router = document.querySelector('ion-router');\r\n            if (router) {\r\n                const direction = result.direction === 'back' ? 'back' : 'forward';\r\n                router.navChanged(direction);\r\n            }\r\n        }\r\n    }\r\n    failed(rejectReason, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        this.transInstr.length = 0;\r\n        this.fireError(rejectReason, ti);\r\n    }\r\n    fireError(rejectReason, ti) {\r\n        if (ti.done) {\r\n            ti.done(false, false, rejectReason);\r\n        }\r\n        if (ti.reject && !this.destroyed) {\r\n            ti.reject(rejectReason);\r\n        }\r\n        else {\r\n            ti.resolve(false);\r\n        }\r\n    }\r\n    /**\r\n     * Consumes the next transition in the queue.\r\n     *\r\n     * @returns whether the transition is executed.\r\n     */\r\n    nextTrns() {\r\n        // this is the framework's bread 'n butta function\r\n        // only one transition is allowed at any given time\r\n        if (this.isTransitioning) {\r\n            return false;\r\n        }\r\n        // there is no transition happening right now, executes the next instructions.\r\n        const ti = this.transInstr.shift();\r\n        if (!ti) {\r\n            return false;\r\n        }\r\n        this.runTransition(ti);\r\n        return true;\r\n    }\r\n    /** Executes all the transition instruction from the queue. */\r\n    async runTransition(ti) {\r\n        try {\r\n            // set that this nav is actively transitioning\r\n            this.ionNavWillChange.emit();\r\n            this.isTransitioning = true;\r\n            this.prepareTI(ti);\r\n            const leavingView = this.getActiveSync();\r\n            const enteringView = this.getEnteringView(ti, leavingView);\r\n            if (!leavingView && !enteringView) {\r\n                throw new Error('no views in the stack to be removed');\r\n            }\r\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n                await enteringView.init(this.el);\r\n            }\r\n            this.postViewInit(enteringView, leavingView, ti);\r\n            // Needs transition?\r\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\r\n            if (requiresTransition && ti.opts && leavingView) {\r\n                const isBackDirection = ti.opts.direction === 'back';\r\n                /**\r\n                 * If heading back, use the entering page's animation\r\n                 * unless otherwise specified by the developer.\r\n                 */\r\n                if (isBackDirection) {\r\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\r\n                }\r\n                leavingView.animationBuilder = ti.opts.animationBuilder;\r\n            }\r\n            let result;\r\n            if (requiresTransition) {\r\n                result = await this.transition(enteringView, leavingView, ti);\r\n            }\r\n            else {\r\n                // transition is not required, so we are already done!\r\n                // they're inserting/removing the views somewhere in the middle or\r\n                // beginning, so visually nothing needs to animate/transition\r\n                // resolve immediately because there's no animation that's happening\r\n                result = {\r\n                    hasCompleted: true,\r\n                    requiresTransition: false,\r\n                };\r\n            }\r\n            this.success(result, ti);\r\n            this.ionNavDidChange.emit();\r\n        }\r\n        catch (rejectReason) {\r\n            this.failed(rejectReason, ti);\r\n        }\r\n        this.isTransitioning = false;\r\n        this.nextTrns();\r\n    }\r\n    prepareTI(ti) {\r\n        var _a, _b;\r\n        var _c;\r\n        const viewsLength = this.views.length;\r\n        (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\r\n        (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\r\n        if (ti.removeView !== undefined) {\r\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n            const index = this.views.indexOf(ti.removeView);\r\n            if (index < 0) {\r\n                throw new Error('removeView was not found');\r\n            }\r\n            ti.removeStart += index;\r\n        }\r\n        if (ti.removeStart !== undefined) {\r\n            if (ti.removeStart < 0) {\r\n                ti.removeStart = viewsLength - 1;\r\n            }\r\n            if (ti.removeCount < 0) {\r\n                ti.removeCount = viewsLength - ti.removeStart;\r\n            }\r\n            ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n        }\r\n        if (ti.insertViews) {\r\n            // allow -1 to be passed in to auto push it on the end\r\n            // and clean up the index if it's larger then the size of the stack\r\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n                ti.insertStart = viewsLength;\r\n            }\r\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n        }\r\n        const insertViews = ti.insertViews;\r\n        if (!insertViews) {\r\n            return;\r\n        }\r\n        assert(insertViews.length > 0, 'length can not be zero');\r\n        const viewControllers = convertToViews(insertViews);\r\n        if (viewControllers.length === 0) {\r\n            throw new Error('invalid views to insert');\r\n        }\r\n        // Check all the inserted view are correct\r\n        for (const view of viewControllers) {\r\n            view.delegate = ti.opts.delegate;\r\n            const nav = view.nav;\r\n            if (nav && nav !== this) {\r\n                throw new Error('inserted view was already inserted');\r\n            }\r\n            if (view.state === VIEW_STATE_DESTROYED) {\r\n                throw new Error('inserted view was already destroyed');\r\n            }\r\n        }\r\n        ti.insertViews = viewControllers;\r\n    }\r\n    /**\r\n     * Returns the view that will be entered considering the transition instructions.\r\n     *\r\n     * @param ti The instructions.\r\n     * @param leavingView The view being left or undefined if none.\r\n     *\r\n     * @returns The view that will be entered, undefined if none.\r\n     */\r\n    getEnteringView(ti, leavingView) {\r\n        // The last inserted view will be entered when view are inserted.\r\n        const insertViews = ti.insertViews;\r\n        if (insertViews !== undefined) {\r\n            return insertViews[insertViews.length - 1];\r\n        }\r\n        // When views are deleted, we will enter the last view that is not removed and not the view being left.\r\n        const removeStart = ti.removeStart;\r\n        if (removeStart !== undefined) {\r\n            const views = this.views;\r\n            const removeEnd = removeStart + ti.removeCount;\r\n            for (let i = views.length - 1; i >= 0; i--) {\r\n                const view = views[i];\r\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Adds and Removes the views from the navigation stack.\r\n     *\r\n     * @param enteringView The view being entered.\r\n     * @param leavingView The view being left.\r\n     * @param ti The instructions.\r\n     */\r\n    postViewInit(enteringView, leavingView, ti) {\r\n        var _a, _b, _c;\r\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n        assert(ti.resolve, 'resolve must be valid');\r\n        assert(ti.reject, 'reject must be valid');\r\n        // Compute the views to remove.\r\n        const opts = ti.opts;\r\n        const { insertViews, removeStart, removeCount } = ti;\r\n        /** Records the view to destroy */\r\n        let destroyQueue;\r\n        // there are views to remove\r\n        if (removeStart !== undefined && removeCount !== undefined) {\r\n            assert(removeStart >= 0, 'removeStart can not be negative');\r\n            assert(removeCount >= 0, 'removeCount can not be negative');\r\n            destroyQueue = [];\r\n            for (let i = removeStart; i < removeStart + removeCount; i++) {\r\n                const view = this.views[i];\r\n                if (view !== undefined && view !== enteringView && view !== leavingView) {\r\n                    destroyQueue.push(view);\r\n                }\r\n            }\r\n            // default the direction to \"back\"\r\n            (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\r\n        }\r\n        const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\r\n        assert(finalNumViews >= 0, 'final balance can not be negative');\r\n        if (finalNumViews === 0) {\r\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n            throw new Error('navigation stack needs at least one root page');\r\n        }\r\n        // At this point the transition can not be rejected, any throw should be an error\r\n        // Insert the new views in the stack.\r\n        if (insertViews) {\r\n            // add the views to the\r\n            let insertIndex = ti.insertStart;\r\n            for (const view of insertViews) {\r\n                this.insertViewAt(view, insertIndex);\r\n                insertIndex++;\r\n            }\r\n            if (ti.enteringRequiresTransition) {\r\n                // default to forward if not already set\r\n                (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\r\n            }\r\n        }\r\n        // if the views to be removed are in the beginning or middle\r\n        // and there is not a view that needs to visually transition out\r\n        // then just destroy them and don't transition anything\r\n        // batch all of lifecycles together\r\n        // let's make sure, callbacks are zoned\r\n        if (destroyQueue && destroyQueue.length > 0) {\r\n            for (const view of destroyQueue) {\r\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            }\r\n            // once all lifecycle events has been delivered, we can safely detroy the views\r\n            for (const view of destroyQueue) {\r\n                this.destroyView(view);\r\n            }\r\n        }\r\n    }\r\n    async transition(enteringView, leavingView, ti) {\r\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\r\n        // or if it is a portal (modal, actionsheet, etc.)\r\n        const opts = ti.opts;\r\n        const progressCallback = opts.progressAnimation\r\n            ? (ani) => {\r\n                /**\r\n                 * Because this progress callback is called asynchronously\r\n                 * it is possible for the gesture to start and end before\r\n                 * the animation is ever set. In that scenario, we should\r\n                 * immediately call progressEnd so that the transition promise\r\n                 * resolves and the gesture does not get locked up.\r\n                 */\r\n                if (ani !== undefined && !this.gestureOrAnimationInProgress) {\r\n                    this.gestureOrAnimationInProgress = true;\r\n                    ani.onFinish(() => {\r\n                        this.gestureOrAnimationInProgress = false;\r\n                    }, { oneTimeCallback: true });\r\n                    /**\r\n                     * Playing animation to beginning\r\n                     * with a duration of 0 prevents\r\n                     * any flickering when the animation\r\n                     * is later cleaned up.\r\n                     */\r\n                    ani.progressEnd(0, 0, 0);\r\n                }\r\n                else {\r\n                    this.sbAni = ani;\r\n                }\r\n            }\r\n            : undefined;\r\n        const mode = getIonMode(this);\r\n        const enteringEl = enteringView.element;\r\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n        const leavingEl = leavingView && leavingView.element;\r\n        const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\r\n            leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\r\n        const { hasCompleted } = await transition(animationOpts);\r\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n    }\r\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n        /**\r\n         * If the transition did not complete, the leavingView will still be the active\r\n         * view on the stack. Otherwise unmount all the views after the enteringView.\r\n         */\r\n        const activeView = hasCompleted ? enteringView : leavingView;\r\n        if (activeView) {\r\n            this.unmountInactiveViews(activeView);\r\n        }\r\n        return {\r\n            hasCompleted,\r\n            requiresTransition: true,\r\n            enteringView,\r\n            leavingView,\r\n            direction: opts.direction,\r\n        };\r\n    }\r\n    /**\r\n     * Inserts a view at the specified index.\r\n     *\r\n     * When the view already is in the stack it will be moved to the new position.\r\n     *\r\n     * @param view The view to insert.\r\n     * @param index The index where to insert the view.\r\n     */\r\n    insertViewAt(view, index) {\r\n        const views = this.views;\r\n        const existingIndex = views.indexOf(view);\r\n        if (existingIndex > -1) {\r\n            assert(view.nav === this, 'view is not part of the nav');\r\n            // The view already in the stack, removes it.\r\n            views.splice(existingIndex, 1);\r\n            // and add it back at the requested index.\r\n            views.splice(index, 0, view);\r\n        }\r\n        else {\r\n            assert(!view.nav, 'nav is used');\r\n            // this is a new view to add to the stack\r\n            // create the new entering view\r\n            view.nav = this;\r\n            views.splice(index, 0, view);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a view from the stack.\r\n     *\r\n     * @param view The view to remove.\r\n     */\r\n    removeView(view) {\r\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        assert(index > -1, 'view must be part of the stack');\r\n        if (index >= 0) {\r\n            views.splice(index, 1);\r\n        }\r\n    }\r\n    destroyView(view) {\r\n        view._destroy();\r\n        this.removeView(view);\r\n    }\r\n    /**\r\n     * Unmounts all inactive views after the specified active view.\r\n     *\r\n     * DOM WRITE\r\n     *\r\n     * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\r\n     */\r\n    unmountInactiveViews(activeView) {\r\n        // ok, cleanup time!! Destroy all of the views that are\r\n        // INACTIVE and come after the active view\r\n        // only do this if the views exist, though\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        const views = this.views;\r\n        const activeViewIndex = views.indexOf(activeView);\r\n        for (let i = views.length - 1; i >= 0; i--) {\r\n            const view = views[i];\r\n            /**\r\n             * When inserting multiple views via insertPages\r\n             * the last page will be transitioned to, but the\r\n             * others will not be. As a result, a DOM element\r\n             * will only be created for the last page inserted.\r\n             * As a result, it is possible to have views in the\r\n             * stack that do not have `view.element` yet.\r\n             */\r\n            const element = view.element;\r\n            if (element) {\r\n                if (i > activeViewIndex) {\r\n                    // this view comes after the active view\r\n                    // let's unload it\r\n                    lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n                    this.destroyView(view);\r\n                }\r\n                else if (i < activeViewIndex) {\r\n                    // this view comes before the active view\r\n                    // and it is not a portal then ensure it is hidden\r\n                    setPageHidden(element, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!this.gestureOrAnimationInProgress &&\r\n            !!this.swipeGesture &&\r\n            !this.isTransitioning &&\r\n            this.transInstr.length === 0 &&\r\n            this.canGoBackSync());\r\n    }\r\n    onStart() {\r\n        this.gestureOrAnimationInProgress = true;\r\n        this.pop({ direction: 'back', progressAnimation: true });\r\n    }\r\n    onMove(stepValue) {\r\n        if (this.sbAni) {\r\n            this.sbAni.progressStep(stepValue);\r\n        }\r\n    }\r\n    onEnd(shouldComplete, stepValue, dur) {\r\n        if (this.sbAni) {\r\n            this.sbAni.onFinish(() => {\r\n                this.gestureOrAnimationInProgress = false;\r\n            }, { oneTimeCallback: true });\r\n            // Account for rounding errors in JS\r\n            let newStepValue = shouldComplete ? -0.001 : 0.001;\r\n            /**\r\n             * Animation will be reversed here, so need to\r\n             * reverse the easing curve as well\r\n             *\r\n             * Additionally, we need to account for the time relative\r\n             * to the new easing curve, as `stepValue` is going to be given\r\n             * in terms of a linear curve.\r\n             */\r\n            if (!shouldComplete) {\r\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\r\n            }\r\n            else {\r\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\r\n            }\r\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\r\n        }\r\n        else {\r\n            this.gestureOrAnimationInProgress = false;\r\n        }\r\n    }\r\n    render() {\r\n        return h(\"slot\", { key: '8254ea10bef0575c13f8b0ddbe4643bec19f2366' });\r\n    }\r\n    get el() { return this; }\r\n    static get watchers() { return {\r\n        \"swipeGesture\": [\"swipeGestureChanged\"],\r\n        \"root\": [\"rootChanged\"]\r\n    }; }\r\n    static get style() { return IonNavStyle0; }\r\n}, [1, \"ion-nav\", {\r\n        \"delegate\": [16],\r\n        \"swipeGesture\": [1028, \"swipe-gesture\"],\r\n        \"animated\": [4],\r\n        \"animation\": [16],\r\n        \"rootParams\": [16],\r\n        \"root\": [1],\r\n        \"push\": [64],\r\n        \"insert\": [64],\r\n        \"insertPages\": [64],\r\n        \"pop\": [64],\r\n        \"popTo\": [64],\r\n        \"popToRoot\": [64],\r\n        \"removeIndex\": [64],\r\n        \"setRoot\": [64],\r\n        \"setPages\": [64],\r\n        \"setRouteId\": [64],\r\n        \"getRouteId\": [64],\r\n        \"getActive\": [64],\r\n        \"getByIndex\": [64],\r\n        \"canGoBack\": [64],\r\n        \"getPrevious\": [64]\r\n    }, undefined, {\r\n        \"swipeGesture\": [\"swipeGestureChanged\"],\r\n        \"root\": [\"rootChanged\"]\r\n    }]);\r\nfunction defineCustomElement$1() {\r\n    if (typeof customElements === \"undefined\") {\r\n        return;\r\n    }\r\n    const components = [\"ion-nav\"];\r\n    components.forEach(tagName => { switch (tagName) {\r\n        case \"ion-nav\":\r\n            if (!customElements.get(tagName)) {\r\n                customElements.define(tagName, Nav);\r\n            }\r\n            break;\r\n    } });\r\n}\r\n\r\nconst IonNav = Nav;\r\nconst defineCustomElement = defineCustomElement$1;\r\n\r\nexport { IonNav, defineCustomElement };\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,CAAC,EAAEC,KAAK,QAAQ,+BAA+B;AACtG,SAASC,CAAC,IAAIC,uBAAuB,QAAQ,mBAAmB;AAChE,SAASC,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,qBAAqB,QAAQ,cAAc;AACtE,SAASH,CAAC,IAAII,eAAe,QAAQ,aAAa;AAClD,SAASC,CAAC,IAAIC,SAAS,EAAEC,CAAC,IAAIC,UAAU,EAAEN,CAAC,IAAIO,aAAa,EAAEC,CAAC,IAAIC,qBAAqB,EAAEC,CAAC,IAAIC,oBAAoB,EAAEC,CAAC,IAAIC,mBAAmB,QAAQ,aAAa;AAClK,SAASH,CAAC,IAAII,UAAU,EAAEF,CAAC,IAAIG,MAAM,QAAQ,mBAAmB;AAChE,SAASC,CAAC,IAAIC,eAAe,QAAQ,yBAAyB;AAE9D,MAAMC,cAAc,GAAG,CAAC;AACxB,MAAMC,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,oBAAoB,GAAG,CAAC;AAC9B;AACA,MAAMC,cAAc,CAAC;EACjBC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGP,cAAc;EAC/B;EACA,MAAMQ,IAAIA,CAACC,SAAS,EAAE;IAClB,IAAI,CAACF,KAAK,GAAGN,mBAAmB;IAChC,IAAI,CAAC,IAAI,CAACS,OAAO,EAAE;MACf,MAAML,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAI,CAACK,OAAO,GAAG,MAAMX,eAAe,CAAC,IAAI,CAACY,QAAQ,EAAEF,SAAS,EAAEJ,SAAS,EAAE,CAAC,UAAU,EAAE,oBAAoB,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;IAC9H;EACJ;EACA;AACJ;AACA;EACIM,QAAQA,CAAA,EAAG;IACP/B,MAAM,CAAC,IAAI,CAAC0B,KAAK,KAAKL,oBAAoB,EAAE,6BAA6B,CAAC;IAC1E,MAAMQ,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,EAAE;MACT,IAAI,IAAI,CAACC,QAAQ,EAAE;QACf,IAAI,CAACA,QAAQ,CAACE,iBAAiB,CAACH,OAAO,CAACI,aAAa,EAAEJ,OAAO,CAAC;MACnE,CAAC,MACI;QACDA,OAAO,CAACK,MAAM,CAAC,CAAC;MACpB;IACJ;IACA,IAAI,CAACC,GAAG,GAAGC,SAAS;IACpB,IAAI,CAACV,KAAK,GAAGL,oBAAoB;EACrC;AACJ;AACA,MAAMgB,OAAO,GAAGA,CAACC,IAAI,EAAEC,EAAE,EAAEd,MAAM,KAAK;EAClC,IAAI,CAACa,IAAI,EAAE;IACP,OAAO,KAAK;EAChB;EACA,IAAIA,IAAI,CAACd,SAAS,KAAKe,EAAE,EAAE;IACvB,OAAO,KAAK;EAChB;EACA,OAAOrC,qBAAqB,CAACoC,IAAI,CAACb,MAAM,EAAEA,MAAM,CAAC;AACrD,CAAC;AACD,MAAMe,aAAa,GAAGA,CAACC,IAAI,EAAEhB,MAAM,KAAK;EACpC,IAAI,CAACgB,IAAI,EAAE;IACP,OAAO,IAAI;EACf;EACA,IAAIA,IAAI,YAAYnB,cAAc,EAAE;IAChC,OAAOmB,IAAI;EACf;EACA,OAAO,IAAInB,cAAc,CAACmB,IAAI,EAAEhB,MAAM,CAAC;AAC3C,CAAC;AACD,MAAMiB,cAAc,GAAIC,KAAK,IAAK;EAC9B,OAAOA,KAAK,CACPC,GAAG,CAAEH,IAAI,IAAK;IACf,IAAIA,IAAI,YAAYnB,cAAc,EAAE;MAChC,OAAOmB,IAAI;IACf;IACA,IAAI,WAAW,IAAIA,IAAI,EAAE;MACrB,OAAOD,aAAa,CAACC,IAAI,CAACjB,SAAS,EAAEiB,IAAI,CAACI,cAAc,KAAK,IAAI,GAAGT,SAAS,GAAGK,IAAI,CAACI,cAAc,CAAC;IACxG;IACA,OAAOL,aAAa,CAACC,IAAI,EAAEL,SAAS,CAAC;EACzC,CAAC,CAAC,CACGU,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,IAAI,CAAC;AAClC,CAAC;AAED,MAAMC,MAAM,GAAG,4FAA4F;AAC3G,MAAMC,YAAY,GAAGD,MAAM;AAE3B,MAAME,GAAG,GAAG,aAAc1D,kBAAkB,CAAC,MAAM0D,GAAG,SAASzD,WAAW,CAAC;EACvE8B,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IACP,IAAI,CAAC4B,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,GAAG3D,WAAW,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC5D,IAAI,CAAC4D,gBAAgB,GAAG5D,WAAW,CAAC,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAChE,IAAI,CAAC6D,eAAe,GAAG7D,WAAW,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC8D,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,4BAA4B,GAAG,KAAK;IACzC,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAAChC,QAAQ,GAAGM,SAAS;IACzB,IAAI,CAAC2B,YAAY,GAAG3B,SAAS;IAC7B,IAAI,CAAC4B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,SAAS,GAAG7B,SAAS;IAC1B,IAAI,CAAC8B,UAAU,GAAG9B,SAAS;IAC3B,IAAI,CAAC+B,IAAI,GAAG/B,SAAS;EACzB;EACAgC,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC,IAAI,CAACP,YAAY,KAAK,IAAI,CAAC;IACnD;EACJ;EACAQ,WAAWA,CAAA,EAAG;IACV,MAAMC,KAAK,GAAG5E,KAAK,CAAC4E,KAAK;IACzB,IAAI,IAAI,CAACL,IAAI,KAAK/B,SAAS,EAAE;MACzB;IACJ;IACA,IAAI,IAAI,CAAC0B,OAAO,KAAK,KAAK,EAAE;MACxB;AACZ;AACA;AACA;MACY;IACJ;IACA,IAAI,CAAC,IAAI,CAACJ,SAAS,EAAE;MACjB,IAAI,IAAI,CAACS,IAAI,KAAK/B,SAAS,EAAE;QACzB,IAAI,CAACqC,OAAO,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAACD,UAAU,CAAC;MAC5C;IACJ,CAAC,MACI,IAAIM,KAAK,EAAE;MACZrE,eAAe,CAAC,oEAAoE,EAAE,IAAI,CAACuE,EAAE,CAAC;IAClG;EACJ;EACAC,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACjB,SAAS,GAAGkB,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,CAACH,EAAE,CAACI,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI;IACzG,IAAI,IAAI,CAACf,YAAY,KAAK3B,SAAS,EAAE;MACjC,MAAM2C,IAAI,GAAGhE,UAAU,CAAC,IAAI,CAAC;MAC7B,IAAI,CAACgD,YAAY,GAAG/C,MAAM,CAACgE,UAAU,CAAC,kBAAkB,EAAED,IAAI,KAAK,KAAK,CAAC;IAC7E;IACA,IAAI,CAAC1B,cAAc,CAAC4B,IAAI,CAAC,CAAC;EAC9B;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACrB;IACA,IAAI,CAACpB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACS,WAAW,CAAC,CAAC;IAClB,IAAI,CAACF,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,iBAAiB,CAAC,EAAEc,sBAAsB,CAAC,IAAI,CAACT,EAAE,EAAE,IAAI,CAACU,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACE,MAAM,CAACF,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;IAClL,IAAI,CAACjB,mBAAmB,CAAC,CAAC;EAC9B;EACAqB,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAAC7B,SAAS,GAAG,KAAK;EAC1B;EACA8B,oBAAoBA,CAAA,EAAG;IACnB,KAAK,MAAMpD,IAAI,IAAI,IAAI,CAACuB,KAAK,EAAE;MAC3BxD,SAAS,CAACiC,IAAI,CAACT,OAAO,EAAEnB,qBAAqB,CAAC;MAC9C4B,IAAI,CAACP,QAAQ,CAAC,CAAC;IACnB;IACA;IACA,IAAI,IAAI,CAACsC,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,CAAC;MACtB,IAAI,CAACtB,OAAO,GAAGjC,SAAS;IAC5B;IACA,IAAI,CAACoB,UAAU,CAACoC,MAAM,GAAG,CAAC;IAC1B,IAAI,CAAC/B,KAAK,CAAC+B,MAAM,GAAG,CAAC;IACrB,IAAI,CAAChC,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiC,IAAIA,CAACrE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IACxC,OAAO,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,EAAExE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EACjE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACC,WAAW,EAAEzE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IACvD,OAAO,IAAI,CAACG,WAAW,CAACD,WAAW,EAAE,CAAC;MAAEzE,SAAS;MAAEqB;IAAe,CAAC,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EACrF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAWA,CAACD,WAAW,EAAEE,gBAAgB,EAAEL,IAAI,EAAEC,IAAI,EAAE;IACnD,OAAO,IAAI,CAACK,SAAS,CAAC;MAClBC,WAAW,EAAEJ,WAAW;MACxBK,WAAW,EAAEH,gBAAgB;MAC7BL;IACJ,CAAC,EAAEC,IAAI,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,GAAGA,CAACT,IAAI,EAAEC,IAAI,EAAE;IACZ,OAAO,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEV,IAAI,EAAEC,IAAI,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIU,KAAKA,CAACC,eAAe,EAAEZ,IAAI,EAAEC,IAAI,EAAE;IAC/B,MAAMY,EAAE,GAAG;MACPC,WAAW,EAAE,CAAC,CAAC;MACfC,WAAW,EAAE,CAAC,CAAC;MACff;IACJ,CAAC;IACD,IAAI,OAAOY,eAAe,KAAK,QAAQ,IAAIA,eAAe,CAAClF,SAAS,EAAE;MAClEmF,EAAE,CAACG,UAAU,GAAGJ,eAAe;MAC/BC,EAAE,CAACC,WAAW,GAAG,CAAC;IACtB,CAAC,MACI,IAAI,OAAOF,eAAe,KAAK,QAAQ,EAAE;MAC1CC,EAAE,CAACC,WAAW,GAAGF,eAAe,GAAG,CAAC;IACxC;IACA,OAAO,IAAI,CAACN,SAAS,CAACO,EAAE,EAAEZ,IAAI,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIgB,SAASA,CAACjB,IAAI,EAAEC,IAAI,EAAE;IAClB,OAAO,IAAI,CAACS,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEV,IAAI,EAAEC,IAAI,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,WAAWA,CAACQ,UAAU,EAAEH,WAAW,GAAG,CAAC,EAAEf,IAAI,EAAEC,IAAI,EAAE;IACjD,OAAO,IAAI,CAACK,SAAS,CAAC;MAClBQ,WAAW,EAAEI,UAAU;MACvBH,WAAW;MACXf;IACJ,CAAC,EAAEC,IAAI,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACItB,OAAOA,CAACjD,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IAC3C,OAAO,IAAI,CAACkB,QAAQ,CAAC,CAAC;MAAEzF,SAAS;MAAEqB;IAAe,CAAC,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EACrE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkB,QAAQA,CAACpD,KAAK,EAAEiC,IAAI,EAAEC,IAAI,EAAE;IACxBD,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAIA,IAAI,GAAG,CAAC,CAAE;IACrD;IACA,IAAIA,IAAI,CAAC9B,QAAQ,KAAK,IAAI,EAAE;MACxB8B,IAAI,CAAC9B,QAAQ,GAAG,KAAK;IACzB;IACA,OAAO,IAAI,CAACoC,SAAS,CAAC;MAClBC,WAAW,EAAE,CAAC;MACdC,WAAW,EAAEzC,KAAK;MAClB+C,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE,CAAC,CAAC;MACff;IACJ,CAAC,EAAEC,IAAI,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACImB,UAAUA,CAAC3E,EAAE,EAAEd,MAAM,EAAE0F,SAAS,EAAElD,SAAS,EAAE;IACzC,MAAMmD,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACnC,IAAIhF,OAAO,CAAC+E,MAAM,EAAE7E,EAAE,EAAEd,MAAM,CAAC,EAAE;MAC7B,OAAO6F,OAAO,CAACC,OAAO,CAAC;QACnBC,OAAO,EAAE,KAAK;QACd3F,OAAO,EAAEuF,MAAM,CAACvF;MACpB,CAAC,CAAC;IACN;IACA,IAAI0F,OAAO;IACX,MAAME,OAAO,GAAG,IAAIH,OAAO,CAAEI,CAAC,IAAMH,OAAO,GAAGG,CAAE,CAAC;IACjD,IAAIC,MAAM;IACV,MAAMC,UAAU,GAAG;MACfC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAGC,UAAU,IAAK;QACzB,IAAIC,IAAI;QACR,MAAMjI,CAAC,GAAG,IAAIuH,OAAO,CAAEI,CAAC,IAAMM,IAAI,GAAGN,CAAE,CAAC;QACxCH,OAAO,CAAC;UACJC,OAAO,EAAE,IAAI;UACb3F,OAAO,EAAEkG,UAAU;UACnBE,WAAW,EAAE,MAAAA,CAAA,KAAY;YACrBD,IAAI,CAAC,CAAC;YACN,MAAML,MAAM;UAChB;QACJ,CAAC,CAAC;QACF,OAAO5H,CAAC;MACZ;IACJ,CAAC;IACD,IAAIoH,SAAS,KAAK,MAAM,EAAE;MACtBQ,MAAM,GAAG,IAAI,CAAClD,OAAO,CAAClC,EAAE,EAAEd,MAAM,EAAEmG,UAAU,CAAC;IACjD,CAAC,MACI;MACD;MACA,MAAMM,cAAc,GAAG,IAAI,CAACrE,KAAK,CAACsE,IAAI,CAAEpF,CAAC,IAAKV,OAAO,CAACU,CAAC,EAAER,EAAE,EAAEd,MAAM,CAAC,CAAC;MACrE,IAAIyG,cAAc,EAAE;QAChBP,MAAM,GAAG,IAAI,CAAClB,KAAK,CAACyB,cAAc,EAAEE,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAET,SAAS,EAAE,MAAM;UAAEmB,gBAAgB,EAAErE;QAAU,CAAC,CAAC,CAAC;MACzI,CAAC,MACI,IAAIkD,SAAS,KAAK,SAAS,EAAE;QAC9BQ,MAAM,GAAG,IAAI,CAAC9B,IAAI,CAACtD,EAAE,EAAEd,MAAM,EAAE2G,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAEU,gBAAgB,EAAErE;QAAU,CAAC,CAAC,CAAC;MACjH,CAAC,MACI,IAAIkD,SAAS,KAAK,MAAM,EAAE;QAC3BQ,MAAM,GAAG,IAAI,CAAClD,OAAO,CAAClC,EAAE,EAAEd,MAAM,EAAE2G,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAET,SAAS,EAAE,MAAM;UAAEnD,QAAQ,EAAE,IAAI;UAAEsE,gBAAgB,EAAErE;QAAU,CAAC,CAAC,CAAC;MACvJ;IACJ;IACA,OAAOwD,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMc,UAAUA,CAAA,EAAG;IACf,MAAMnB,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACnC,IAAID,MAAM,EAAE;MACR,OAAO;QACH7E,EAAE,EAAE6E,MAAM,CAACvF,OAAO,CAAC2G,OAAO;QAC1B/G,MAAM,EAAE2F,MAAM,CAAC3F,MAAM;QACrBI,OAAO,EAAEuF,MAAM,CAACvF;MACpB,CAAC;IACL;IACA,OAAOO,SAAS;EACpB;EACA;AACJ;AACA;EACI,MAAMqG,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACpB,aAAa,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMqB,UAAUA,CAACC,KAAK,EAAE;IACpB,OAAO,IAAI,CAAC9E,KAAK,CAAC8E,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMC,SAASA,CAACtG,IAAI,EAAE;IAClB,OAAO,IAAI,CAACuG,aAAa,CAACvG,IAAI,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMwG,WAAWA,CAACxG,IAAI,EAAE;IACpB,OAAO,IAAI,CAACyG,eAAe,CAACzG,IAAI,CAAC;EACrC;EACA0G,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACnF,KAAK,CAAC+B,MAAM;EAC5B;EACAyB,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACxD,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC+B,MAAM,GAAG,CAAC,CAAC;EAC5C;EACAiD,aAAaA,CAACvG,IAAI,GAAG,IAAI,CAAC+E,aAAa,CAAC,CAAC,EAAE;IACvC,OAAO,CAAC,EAAE/E,IAAI,IAAI,IAAI,CAACyG,eAAe,CAACzG,IAAI,CAAC,CAAC;EACjD;EACAyG,eAAeA,CAACzG,IAAI,GAAG,IAAI,CAAC+E,aAAa,CAAC,CAAC,EAAE;IACzC,IAAI,CAAC/E,IAAI,EAAE;MACP,OAAOF,SAAS;IACpB;IACA,MAAMyB,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM8E,KAAK,GAAG9E,KAAK,CAACoF,OAAO,CAAC3G,IAAI,CAAC;IACjC,OAAOqG,KAAK,GAAG,CAAC,GAAG9E,KAAK,CAAC8E,KAAK,GAAG,CAAC,CAAC,GAAGvG,SAAS;EACnD;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMgE,SAASA,CAACO,EAAE,EAAEZ,IAAI,EAAE;IACtB,IAAImD,EAAE,EAAEC,EAAE;IACV,IAAI,IAAI,CAACxF,eAAe,KAAK,CAACuF,EAAE,GAAGvC,EAAE,CAACb,IAAI,MAAM,IAAI,IAAIoD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,UAAU,CAAC,EAAE;MAC7F,OAAO,KAAK;IAChB;IACA,MAAM3B,OAAO,GAAG,IAAIH,OAAO,CAAC,CAACC,OAAO,EAAE8B,MAAM,KAAK;MAC7C1C,EAAE,CAACY,OAAO,GAAGA,OAAO;MACpBZ,EAAE,CAAC0C,MAAM,GAAGA,MAAM;IACtB,CAAC,CAAC;IACF1C,EAAE,CAACZ,IAAI,GAAGA,IAAI;IACd;AACR;AACA;AACA;AACA;AACA;IACQ,IAAIY,EAAE,CAACb,IAAI,IAAIa,EAAE,CAACb,IAAI,CAAC+B,SAAS,KAAK,KAAK,IAAI,IAAI,CAACnE,SAAS,EAAE;MAC1D,MAAM4F,MAAM,GAAG1E,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;MACnD,IAAIyE,MAAM,EAAE;QACR,MAAMC,aAAa,GAAG,MAAMD,MAAM,CAACC,aAAa,CAAC,CAAC;QAClD,IAAIA,aAAa,KAAK,KAAK,EAAE;UACzB,OAAO,KAAK;QAChB;QACA,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;UACnCD,MAAM,CAACzD,IAAI,CAAC0D,aAAa,EAAE5C,EAAE,CAACb,IAAI,CAACqB,SAAS,IAAI,MAAM,CAAC;UACvD,OAAO,KAAK;QAChB;MACJ;IACJ;IACA;IACA,IAAI,CAAC,CAACgC,EAAE,GAAGxC,EAAE,CAACL,WAAW,MAAM,IAAI,IAAI6C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACvD,MAAM,MAAM,CAAC,EAAE;MAC9Ee,EAAE,CAACL,WAAW,GAAGlE,SAAS;IAC9B;IACA;IACA,IAAI,CAACoB,UAAU,CAACqC,IAAI,CAACc,EAAE,CAAC;IACxB;IACA;IACA,IAAI,CAAC6C,QAAQ,CAAC,CAAC;IACf,OAAO/B,OAAO;EAClB;EACAgC,OAAOA,CAACC,MAAM,EAAE/C,EAAE,EAAE;IAChB,IAAI,IAAI,CAAC/C,SAAS,EAAE;MAChB,IAAI,CAAC+F,SAAS,CAAC,8BAA8B,EAAEhD,EAAE,CAAC;MAClD;IACJ;IACA,IAAIA,EAAE,CAACZ,IAAI,EAAE;MACTY,EAAE,CAACZ,IAAI,CAAC2D,MAAM,CAACE,YAAY,EAAEF,MAAM,CAACG,kBAAkB,EAAEH,MAAM,CAACI,YAAY,EAAEJ,MAAM,CAACK,WAAW,EAAEL,MAAM,CAACvC,SAAS,CAAC;IACtH;IACAR,EAAE,CAACY,OAAO,CAACmC,MAAM,CAACE,YAAY,CAAC;IAC/B,IAAIjD,EAAE,CAACb,IAAI,CAAC+B,SAAS,KAAK,KAAK,IAAI,IAAI,CAACnE,SAAS,EAAE;MAC/C,MAAM4F,MAAM,GAAG1E,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;MACnD,IAAIyE,MAAM,EAAE;QACR,MAAMnC,SAAS,GAAGuC,MAAM,CAACvC,SAAS,KAAK,MAAM,GAAG,MAAM,GAAG,SAAS;QAClEmC,MAAM,CAACU,UAAU,CAAC7C,SAAS,CAAC;MAChC;IACJ;EACJ;EACA8C,MAAMA,CAACC,YAAY,EAAEvD,EAAE,EAAE;IACrB,IAAI,IAAI,CAAC/C,SAAS,EAAE;MAChB,IAAI,CAAC+F,SAAS,CAAC,8BAA8B,EAAEhD,EAAE,CAAC;MAClD;IACJ;IACA,IAAI,CAACnD,UAAU,CAACoC,MAAM,GAAG,CAAC;IAC1B,IAAI,CAAC+D,SAAS,CAACO,YAAY,EAAEvD,EAAE,CAAC;EACpC;EACAgD,SAASA,CAACO,YAAY,EAAEvD,EAAE,EAAE;IACxB,IAAIA,EAAE,CAACZ,IAAI,EAAE;MACTY,EAAE,CAACZ,IAAI,CAAC,KAAK,EAAE,KAAK,EAAEmE,YAAY,CAAC;IACvC;IACA,IAAIvD,EAAE,CAAC0C,MAAM,IAAI,CAAC,IAAI,CAACzF,SAAS,EAAE;MAC9B+C,EAAE,CAAC0C,MAAM,CAACa,YAAY,CAAC;IAC3B,CAAC,MACI;MACDvD,EAAE,CAACY,OAAO,CAAC,KAAK,CAAC;IACrB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIiC,QAAQA,CAAA,EAAG;IACP;IACA;IACA,IAAI,IAAI,CAAC7F,eAAe,EAAE;MACtB,OAAO,KAAK;IAChB;IACA;IACA,MAAMgD,EAAE,GAAG,IAAI,CAACnD,UAAU,CAAC2G,KAAK,CAAC,CAAC;IAClC,IAAI,CAACxD,EAAE,EAAE;MACL,OAAO,KAAK;IAChB;IACA,IAAI,CAACyD,aAAa,CAACzD,EAAE,CAAC;IACtB,OAAO,IAAI;EACf;EACA;EACA,MAAMyD,aAAaA,CAACzD,EAAE,EAAE;IACpB,IAAI;MACA;MACA,IAAI,CAACrD,gBAAgB,CAAC2B,IAAI,CAAC,CAAC;MAC5B,IAAI,CAACtB,eAAe,GAAG,IAAI;MAC3B,IAAI,CAAC0G,SAAS,CAAC1D,EAAE,CAAC;MAClB,MAAMoD,WAAW,GAAG,IAAI,CAAC1C,aAAa,CAAC,CAAC;MACxC,MAAMyC,YAAY,GAAG,IAAI,CAACQ,eAAe,CAAC3D,EAAE,EAAEoD,WAAW,CAAC;MAC1D,IAAI,CAACA,WAAW,IAAI,CAACD,YAAY,EAAE;QAC/B,MAAM,IAAIS,KAAK,CAAC,qCAAqC,CAAC;MAC1D;MACA,IAAIT,YAAY,IAAIA,YAAY,CAACpI,KAAK,KAAKP,cAAc,EAAE;QACvD,MAAM2I,YAAY,CAACnI,IAAI,CAAC,IAAI,CAAC+C,EAAE,CAAC;MACpC;MACA,IAAI,CAAC8F,YAAY,CAACV,YAAY,EAAEC,WAAW,EAAEpD,EAAE,CAAC;MAChD;MACA,MAAMkD,kBAAkB,GAAG,CAAClD,EAAE,CAAC8D,0BAA0B,IAAI9D,EAAE,CAAC+D,yBAAyB,KAAKZ,YAAY,KAAKC,WAAW;MAC1H,IAAIF,kBAAkB,IAAIlD,EAAE,CAACb,IAAI,IAAIiE,WAAW,EAAE;QAC9C,MAAMY,eAAe,GAAGhE,EAAE,CAACb,IAAI,CAACqB,SAAS,KAAK,MAAM;QACpD;AAChB;AACA;AACA;QACgB,IAAIwD,eAAe,EAAE;UACjBhE,EAAE,CAACb,IAAI,CAACwC,gBAAgB,GAAG3B,EAAE,CAACb,IAAI,CAACwC,gBAAgB,KAAKwB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACxB,gBAAgB,CAAC;QACtJ;QACAyB,WAAW,CAACzB,gBAAgB,GAAG3B,EAAE,CAACb,IAAI,CAACwC,gBAAgB;MAC3D;MACA,IAAIoB,MAAM;MACV,IAAIG,kBAAkB,EAAE;QACpBH,MAAM,GAAG,MAAM,IAAI,CAACnJ,UAAU,CAACuJ,YAAY,EAAEC,WAAW,EAAEpD,EAAE,CAAC;MACjE,CAAC,MACI;QACD;QACA;QACA;QACA;QACA+C,MAAM,GAAG;UACLE,YAAY,EAAE,IAAI;UAClBC,kBAAkB,EAAE;QACxB,CAAC;MACL;MACA,IAAI,CAACJ,OAAO,CAACC,MAAM,EAAE/C,EAAE,CAAC;MACxB,IAAI,CAACpD,eAAe,CAAC0B,IAAI,CAAC,CAAC;IAC/B,CAAC,CACD,OAAOiF,YAAY,EAAE;MACjB,IAAI,CAACD,MAAM,CAACC,YAAY,EAAEvD,EAAE,CAAC;IACjC;IACA,IAAI,CAAChD,eAAe,GAAG,KAAK;IAC5B,IAAI,CAAC6F,QAAQ,CAAC,CAAC;EACnB;EACAa,SAASA,CAAC1D,EAAE,EAAE;IACV,IAAIuC,EAAE,EAAEC,EAAE;IACV,IAAIyB,EAAE;IACN,MAAMC,WAAW,GAAG,IAAI,CAAChH,KAAK,CAAC+B,MAAM;IACrC,CAACsD,EAAE,GAAGvC,EAAE,CAACb,IAAI,MAAM,IAAI,IAAIoD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIvC,EAAE,CAACb,IAAI,GAAG,CAAC,CAAE;IAC9D,CAACqD,EAAE,GAAG,CAACyB,EAAE,GAAGjE,EAAE,CAACb,IAAI,EAAEhE,QAAQ,MAAM,IAAI,IAAIqH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIyB,EAAE,CAAC9I,QAAQ,GAAG,IAAI,CAACA,QAAS;IAC7F,IAAI6E,EAAE,CAACG,UAAU,KAAK1E,SAAS,EAAE;MAC7BpC,MAAM,CAAC2G,EAAE,CAACC,WAAW,KAAKxE,SAAS,EAAE,8BAA8B,CAAC;MACpEpC,MAAM,CAAC2G,EAAE,CAACE,WAAW,KAAKzE,SAAS,EAAE,8BAA8B,CAAC;MACpE,MAAMuG,KAAK,GAAG,IAAI,CAAC9E,KAAK,CAACoF,OAAO,CAACtC,EAAE,CAACG,UAAU,CAAC;MAC/C,IAAI6B,KAAK,GAAG,CAAC,EAAE;QACX,MAAM,IAAI4B,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MACA5D,EAAE,CAACC,WAAW,IAAI+B,KAAK;IAC3B;IACA,IAAIhC,EAAE,CAACC,WAAW,KAAKxE,SAAS,EAAE;MAC9B,IAAIuE,EAAE,CAACC,WAAW,GAAG,CAAC,EAAE;QACpBD,EAAE,CAACC,WAAW,GAAGiE,WAAW,GAAG,CAAC;MACpC;MACA,IAAIlE,EAAE,CAACE,WAAW,GAAG,CAAC,EAAE;QACpBF,EAAE,CAACE,WAAW,GAAGgE,WAAW,GAAGlE,EAAE,CAACC,WAAW;MACjD;MACAD,EAAE,CAAC+D,yBAAyB,GAAG/D,EAAE,CAACE,WAAW,GAAG,CAAC,IAAIF,EAAE,CAACC,WAAW,GAAGD,EAAE,CAACE,WAAW,KAAKgE,WAAW;IACxG;IACA,IAAIlE,EAAE,CAACL,WAAW,EAAE;MAChB;MACA;MACA,IAAIK,EAAE,CAACN,WAAW,GAAG,CAAC,IAAIM,EAAE,CAACN,WAAW,GAAGwE,WAAW,EAAE;QACpDlE,EAAE,CAACN,WAAW,GAAGwE,WAAW;MAChC;MACAlE,EAAE,CAAC8D,0BAA0B,GAAG9D,EAAE,CAACN,WAAW,KAAKwE,WAAW;IAClE;IACA,MAAMvE,WAAW,GAAGK,EAAE,CAACL,WAAW;IAClC,IAAI,CAACA,WAAW,EAAE;MACd;IACJ;IACAtG,MAAM,CAACsG,WAAW,CAACV,MAAM,GAAG,CAAC,EAAE,wBAAwB,CAAC;IACxD,MAAMkF,eAAe,GAAGpI,cAAc,CAAC4D,WAAW,CAAC;IACnD,IAAIwE,eAAe,CAAClF,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM,IAAI2E,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IACA;IACA,KAAK,MAAMjI,IAAI,IAAIwI,eAAe,EAAE;MAChCxI,IAAI,CAACR,QAAQ,GAAG6E,EAAE,CAACb,IAAI,CAAChE,QAAQ;MAChC,MAAMK,GAAG,GAAGG,IAAI,CAACH,GAAG;MACpB,IAAIA,GAAG,IAAIA,GAAG,KAAK,IAAI,EAAE;QACrB,MAAM,IAAIoI,KAAK,CAAC,oCAAoC,CAAC;MACzD;MACA,IAAIjI,IAAI,CAACZ,KAAK,KAAKL,oBAAoB,EAAE;QACrC,MAAM,IAAIkJ,KAAK,CAAC,qCAAqC,CAAC;MAC1D;IACJ;IACA5D,EAAE,CAACL,WAAW,GAAGwE,eAAe;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIR,eAAeA,CAAC3D,EAAE,EAAEoD,WAAW,EAAE;IAC7B;IACA,MAAMzD,WAAW,GAAGK,EAAE,CAACL,WAAW;IAClC,IAAIA,WAAW,KAAKlE,SAAS,EAAE;MAC3B,OAAOkE,WAAW,CAACA,WAAW,CAACV,MAAM,GAAG,CAAC,CAAC;IAC9C;IACA;IACA,MAAMgB,WAAW,GAAGD,EAAE,CAACC,WAAW;IAClC,IAAIA,WAAW,KAAKxE,SAAS,EAAE;MAC3B,MAAMyB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,MAAMkH,SAAS,GAAGnE,WAAW,GAAGD,EAAE,CAACE,WAAW;MAC9C,KAAK,IAAImE,CAAC,GAAGnH,KAAK,CAAC+B,MAAM,GAAG,CAAC,EAAEoF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxC,MAAM1I,IAAI,GAAGuB,KAAK,CAACmH,CAAC,CAAC;QACrB,IAAI,CAACA,CAAC,GAAGpE,WAAW,IAAIoE,CAAC,IAAID,SAAS,KAAKzI,IAAI,KAAKyH,WAAW,EAAE;UAC7D,OAAOzH,IAAI;QACf;MACJ;IACJ;IACA,OAAOF,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoI,YAAYA,CAACV,YAAY,EAAEC,WAAW,EAAEpD,EAAE,EAAE;IACxC,IAAIuC,EAAE,EAAEC,EAAE,EAAEyB,EAAE;IACd5K,MAAM,CAAC+J,WAAW,IAAID,YAAY,EAAE,4CAA4C,CAAC;IACjF9J,MAAM,CAAC2G,EAAE,CAACY,OAAO,EAAE,uBAAuB,CAAC;IAC3CvH,MAAM,CAAC2G,EAAE,CAAC0C,MAAM,EAAE,sBAAsB,CAAC;IACzC;IACA,MAAMvD,IAAI,GAAGa,EAAE,CAACb,IAAI;IACpB,MAAM;MAAEQ,WAAW;MAAEM,WAAW;MAAEC;IAAY,CAAC,GAAGF,EAAE;IACpD;IACA,IAAIsE,YAAY;IAChB;IACA,IAAIrE,WAAW,KAAKxE,SAAS,IAAIyE,WAAW,KAAKzE,SAAS,EAAE;MACxDpC,MAAM,CAAC4G,WAAW,IAAI,CAAC,EAAE,iCAAiC,CAAC;MAC3D5G,MAAM,CAAC6G,WAAW,IAAI,CAAC,EAAE,iCAAiC,CAAC;MAC3DoE,YAAY,GAAG,EAAE;MACjB,KAAK,IAAID,CAAC,GAAGpE,WAAW,EAAEoE,CAAC,GAAGpE,WAAW,GAAGC,WAAW,EAAEmE,CAAC,EAAE,EAAE;QAC1D,MAAM1I,IAAI,GAAG,IAAI,CAACuB,KAAK,CAACmH,CAAC,CAAC;QAC1B,IAAI1I,IAAI,KAAKF,SAAS,IAAIE,IAAI,KAAKwH,YAAY,IAAIxH,IAAI,KAAKyH,WAAW,EAAE;UACrEkB,YAAY,CAACpF,IAAI,CAACvD,IAAI,CAAC;QAC3B;MACJ;MACA;MACA,CAAC4G,EAAE,GAAGpD,IAAI,CAACqB,SAAS,MAAM,IAAI,IAAI+B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIpD,IAAI,CAACqB,SAAS,GAAG,MAAO;IACpF;IACA,MAAM+D,aAAa,GAAG,IAAI,CAACrH,KAAK,CAAC+B,MAAM,IAAI,CAACuD,EAAE,GAAG7C,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACV,MAAM,MAAM,IAAI,IAAIuD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,IAAItC,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAGA,WAAW,GAAG,CAAC,CAAC;IACvO7G,MAAM,CAACkL,aAAa,IAAI,CAAC,EAAE,mCAAmC,CAAC;IAC/D,IAAIA,aAAa,KAAK,CAAC,EAAE;MACrBC,OAAO,CAACC,IAAI,CAAE,sGAAqG,EAAE,IAAI,EAAE,IAAI,CAAC1G,EAAE,CAAC;MACnI,MAAM,IAAI6F,KAAK,CAAC,+CAA+C,CAAC;IACpE;IACA;IACA;IACA,IAAIjE,WAAW,EAAE;MACb;MACA,IAAIL,WAAW,GAAGU,EAAE,CAACN,WAAW;MAChC,KAAK,MAAM/D,IAAI,IAAIgE,WAAW,EAAE;QAC5B,IAAI,CAAC+E,YAAY,CAAC/I,IAAI,EAAE2D,WAAW,CAAC;QACpCA,WAAW,EAAE;MACjB;MACA,IAAIU,EAAE,CAAC8D,0BAA0B,EAAE;QAC/B;QACA,CAACG,EAAE,GAAG9E,IAAI,CAACqB,SAAS,MAAM,IAAI,IAAIyD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAI9E,IAAI,CAACqB,SAAS,GAAG,SAAU;MACvF;IACJ;IACA;IACA;IACA;IACA;IACA;IACA,IAAI8D,YAAY,IAAIA,YAAY,CAACrF,MAAM,GAAG,CAAC,EAAE;MACzC,KAAK,MAAMtD,IAAI,IAAI2I,YAAY,EAAE;QAC7B5K,SAAS,CAACiC,IAAI,CAACT,OAAO,EAAEjB,oBAAoB,CAAC;QAC7CP,SAAS,CAACiC,IAAI,CAACT,OAAO,EAAEf,mBAAmB,CAAC;QAC5CT,SAAS,CAACiC,IAAI,CAACT,OAAO,EAAEnB,qBAAqB,CAAC;MAClD;MACA;MACA,KAAK,MAAM4B,IAAI,IAAI2I,YAAY,EAAE;QAC7B,IAAI,CAACK,WAAW,CAAChJ,IAAI,CAAC;MAC1B;IACJ;EACJ;EACA,MAAM/B,UAAUA,CAACuJ,YAAY,EAAEC,WAAW,EAAEpD,EAAE,EAAE;IAC5C;IACA;IACA,MAAMb,IAAI,GAAGa,EAAE,CAACb,IAAI;IACpB,MAAMyF,gBAAgB,GAAGzF,IAAI,CAAC0F,iBAAiB,GACxCC,GAAG,IAAK;MACP;AAChB;AACA;AACA;AACA;AACA;AACA;MACgB,IAAIA,GAAG,KAAKrJ,SAAS,IAAI,CAAC,IAAI,CAACqB,4BAA4B,EAAE;QACzD,IAAI,CAACA,4BAA4B,GAAG,IAAI;QACxCgI,GAAG,CAACC,QAAQ,CAAC,MAAM;UACf,IAAI,CAACjI,4BAA4B,GAAG,KAAK;QAC7C,CAAC,EAAE;UAAEkI,eAAe,EAAE;QAAK,CAAC,CAAC;QAC7B;AACpB;AACA;AACA;AACA;AACA;QACoBF,GAAG,CAACG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5B,CAAC,MACI;QACD,IAAI,CAACC,KAAK,GAAGJ,GAAG;MACpB;IACJ,CAAC,GACCrJ,SAAS;IACf,MAAM2C,IAAI,GAAGhE,UAAU,CAAC,IAAI,CAAC;IAC7B,MAAMgH,UAAU,GAAG+B,YAAY,CAACjI,OAAO;IACvC;IACA,MAAMiK,SAAS,GAAG/B,WAAW,IAAIA,WAAW,CAAClI,OAAO;IACpD,MAAMkK,aAAa,GAAG3D,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;MAAEtD,IAAI;MAAEiH,UAAU,EAAE,IAAI,CAACnD,aAAa,CAACiB,YAAY,CAAC;MAAEmC,MAAM,EAAE,IAAI,CAACvH,EAAE;MAAE6G,gBAAgB;MAAEvH,QAAQ,EAAE,IAAI,CAACA,QAAQ,IAAIhD,MAAM,CAACgE,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC;MAAE+C,UAAU;MACjN+D;IAAU,CAAC,EAAEhG,IAAI,CAAC,EAAE;MAAEwC,gBAAgB,EAAExC,IAAI,CAACwC,gBAAgB,IAAI,IAAI,CAACrE,SAAS,IAAIjD,MAAM,CAACkL,GAAG,CAAC,cAAc;IAAE,CAAC,CAAC;IACpH,MAAM;MAAEtC;IAAa,CAAC,GAAG,MAAMrJ,UAAU,CAACwL,aAAa,CAAC;IACxD,OAAO,IAAI,CAACI,gBAAgB,CAACvC,YAAY,EAAEE,YAAY,EAAEC,WAAW,EAAEjE,IAAI,CAAC;EAC/E;EACAqG,gBAAgBA,CAACvC,YAAY,EAAEE,YAAY,EAAEC,WAAW,EAAEjE,IAAI,EAAE;IAC5D;AACR;AACA;AACA;IACQ,MAAMsG,UAAU,GAAGxC,YAAY,GAAGE,YAAY,GAAGC,WAAW;IAC5D,IAAIqC,UAAU,EAAE;MACZ,IAAI,CAACC,oBAAoB,CAACD,UAAU,CAAC;IACzC;IACA,OAAO;MACHxC,YAAY;MACZC,kBAAkB,EAAE,IAAI;MACxBC,YAAY;MACZC,WAAW;MACX5C,SAAS,EAAErB,IAAI,CAACqB;IACpB,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIkE,YAAYA,CAAC/I,IAAI,EAAEqG,KAAK,EAAE;IACtB,MAAM9E,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMyI,aAAa,GAAGzI,KAAK,CAACoF,OAAO,CAAC3G,IAAI,CAAC;IACzC,IAAIgK,aAAa,GAAG,CAAC,CAAC,EAAE;MACpBtM,MAAM,CAACsC,IAAI,CAACH,GAAG,KAAK,IAAI,EAAE,6BAA6B,CAAC;MACxD;MACA0B,KAAK,CAAC0I,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;MAC9B;MACAzI,KAAK,CAAC0I,MAAM,CAAC5D,KAAK,EAAE,CAAC,EAAErG,IAAI,CAAC;IAChC,CAAC,MACI;MACDtC,MAAM,CAAC,CAACsC,IAAI,CAACH,GAAG,EAAE,aAAa,CAAC;MAChC;MACA;MACAG,IAAI,CAACH,GAAG,GAAG,IAAI;MACf0B,KAAK,CAAC0I,MAAM,CAAC5D,KAAK,EAAE,CAAC,EAAErG,IAAI,CAAC;IAChC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIwE,UAAUA,CAACxE,IAAI,EAAE;IACbtC,MAAM,CAACsC,IAAI,CAACZ,KAAK,KAAKN,mBAAmB,IAAIkB,IAAI,CAACZ,KAAK,KAAKL,oBAAoB,EAAE,0CAA0C,CAAC;IAC7H,MAAMwC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM8E,KAAK,GAAG9E,KAAK,CAACoF,OAAO,CAAC3G,IAAI,CAAC;IACjCtC,MAAM,CAAC2I,KAAK,GAAG,CAAC,CAAC,EAAE,gCAAgC,CAAC;IACpD,IAAIA,KAAK,IAAI,CAAC,EAAE;MACZ9E,KAAK,CAAC0I,MAAM,CAAC5D,KAAK,EAAE,CAAC,CAAC;IAC1B;EACJ;EACA2C,WAAWA,CAAChJ,IAAI,EAAE;IACdA,IAAI,CAACP,QAAQ,CAAC,CAAC;IACf,IAAI,CAAC+E,UAAU,CAACxE,IAAI,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI+J,oBAAoBA,CAACD,UAAU,EAAE;IAC7B;IACA;IACA;IACA,IAAI,IAAI,CAACxI,SAAS,EAAE;MAChB;IACJ;IACA,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM2I,eAAe,GAAG3I,KAAK,CAACoF,OAAO,CAACmD,UAAU,CAAC;IACjD,KAAK,IAAIpB,CAAC,GAAGnH,KAAK,CAAC+B,MAAM,GAAG,CAAC,EAAEoF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxC,MAAM1I,IAAI,GAAGuB,KAAK,CAACmH,CAAC,CAAC;MACrB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,MAAMnJ,OAAO,GAAGS,IAAI,CAACT,OAAO;MAC5B,IAAIA,OAAO,EAAE;QACT,IAAImJ,CAAC,GAAGwB,eAAe,EAAE;UACrB;UACA;UACAnM,SAAS,CAACwB,OAAO,EAAEnB,qBAAqB,CAAC;UACzC,IAAI,CAAC4K,WAAW,CAAChJ,IAAI,CAAC;QAC1B,CAAC,MACI,IAAI0I,CAAC,GAAGwB,eAAe,EAAE;UAC1B;UACA;UACAhM,aAAa,CAACqB,OAAO,EAAE,IAAI,CAAC;QAChC;MACJ;IACJ;EACJ;EACAuD,QAAQA,CAAA,EAAG;IACP,OAAQ,CAAC,IAAI,CAAC3B,4BAA4B,IACtC,CAAC,CAAC,IAAI,CAACM,YAAY,IACnB,CAAC,IAAI,CAACJ,eAAe,IACrB,IAAI,CAACH,UAAU,CAACoC,MAAM,KAAK,CAAC,IAC5B,IAAI,CAACiD,aAAa,CAAC,CAAC;EAC5B;EACAvD,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7B,4BAA4B,GAAG,IAAI;IACxC,IAAI,CAAC8C,GAAG,CAAC;MAAEY,SAAS,EAAE,MAAM;MAAEqE,iBAAiB,EAAE;IAAK,CAAC,CAAC;EAC5D;EACAjG,MAAMA,CAACkH,SAAS,EAAE;IACd,IAAI,IAAI,CAACZ,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACa,YAAY,CAACD,SAAS,CAAC;IACtC;EACJ;EACAjH,KAAKA,CAACmH,cAAc,EAAEF,SAAS,EAAEG,GAAG,EAAE;IAClC,IAAI,IAAI,CAACf,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACH,QAAQ,CAAC,MAAM;QACtB,IAAI,CAACjI,4BAA4B,GAAG,KAAK;MAC7C,CAAC,EAAE;QAAEkI,eAAe,EAAE;MAAK,CAAC,CAAC;MAC7B;MACA,IAAIkB,YAAY,GAAGF,cAAc,GAAG,CAAC,KAAK,GAAG,KAAK;MAClD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,CAACA,cAAc,EAAE;QACjB,IAAI,CAACd,KAAK,CAACiB,MAAM,CAAC,gCAAgC,CAAC;QACnDD,YAAY,IAAI/M,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE2M,SAAS,CAAC,CAAC,CAAC,CAAC;MAC/F,CAAC,MACI;QACDI,YAAY,IAAI/M,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE2M,SAAS,CAAC,CAAC,CAAC,CAAC;MAC/F;MACA,IAAI,CAACZ,KAAK,CAACD,WAAW,CAACe,cAAc,GAAG,CAAC,GAAG,CAAC,EAAEE,YAAY,EAAED,GAAG,CAAC;IACrE,CAAC,MACI;MACD,IAAI,CAACnJ,4BAA4B,GAAG,KAAK;IAC7C;EACJ;EACAsJ,MAAMA,CAAA,EAAG;IACL,OAAOpN,CAAC,CAAC,MAAM,EAAE;MAAEqN,GAAG,EAAE;IAA2C,CAAC,CAAC;EACzE;EACA,IAAItI,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EACxB,WAAWuI,QAAQA,CAAA,EAAG;IAAE,OAAO;MAC3B,cAAc,EAAE,CAAC,qBAAqB,CAAC;MACvC,MAAM,EAAE,CAAC,aAAa;IAC1B,CAAC;EAAE;EACH,WAAWC,KAAKA,CAAA,EAAG;IAAE,OAAOjK,YAAY;EAAE;AAC9C,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE;EACV,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,cAAc,EAAE,CAAC,IAAI,EAAE,eAAe,CAAC;EACvC,UAAU,EAAE,CAAC,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,MAAM,EAAE,CAAC,CAAC,CAAC;EACX,MAAM,EAAE,CAAC,EAAE,CAAC;EACZ,QAAQ,EAAE,CAAC,EAAE,CAAC;EACd,aAAa,EAAE,CAAC,EAAE,CAAC;EACnB,KAAK,EAAE,CAAC,EAAE,CAAC;EACX,OAAO,EAAE,CAAC,EAAE,CAAC;EACb,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,aAAa,EAAE,CAAC,EAAE,CAAC;EACnB,SAAS,EAAE,CAAC,EAAE,CAAC;EACf,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,aAAa,EAAE,CAAC,EAAE;AACtB,CAAC,EAAEb,SAAS,EAAE;EACV,cAAc,EAAE,CAAC,qBAAqB,CAAC;EACvC,MAAM,EAAE,CAAC,aAAa;AAC1B,CAAC,CAAC,CAAC;AACP,SAAS+K,qBAAqBA,CAAA,EAAG;EAC7B,IAAI,OAAOC,cAAc,KAAK,WAAW,EAAE;IACvC;EACJ;EACA,MAAMC,UAAU,GAAG,CAAC,SAAS,CAAC;EAC9BA,UAAU,CAACC,OAAO,CAAC9E,OAAO,IAAI;IAAE,QAAQA,OAAO;MAC3C,KAAK,SAAS;QACV,IAAI,CAAC4E,cAAc,CAAClB,GAAG,CAAC1D,OAAO,CAAC,EAAE;UAC9B4E,cAAc,CAACG,MAAM,CAAC/E,OAAO,EAAEtF,GAAG,CAAC;QACvC;QACA;IACR;EAAE,CAAC,CAAC;AACR;AAEA,MAAMsK,MAAM,GAAGtK,GAAG;AAClB,MAAMuK,mBAAmB,GAAGN,qBAAqB;AAEjD,SAASK,MAAM,EAAEC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}